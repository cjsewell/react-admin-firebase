{"version":3,"file":"index.modern.js","sources":["../src/misc/timestamp-parser.ts","../src/misc/document-parser.ts","../src/misc/arrayHelpers.ts","../src/misc/objectFlatten.ts","../src/misc/logger/logger-base.ts","../src/misc/logger/logger.ts","../src/misc/logger/firestore-logger.ts","../src/misc/file-parser.ts","../src/misc/pathHelper.ts","../src/providers/database/firebase/FirebaseWrapper.ts","../src/providers/database/ResourceManager.ts","../src/providers/database/FireClient.ts","../src/misc/metadata-parser.ts","../src/providers/lazy-loading/queryCursors.ts","../src/providers/lazy-loading/paramsToQuery.ts","../src/providers/lazy-loading/FirebaseLazyLoadingClient.ts","../src/providers/DataProvider.ts","../src/misc/status-code-translator.ts","../src/providers/queries/GetList.ts","../src/providers/queries/GetOne.ts","../src/providers/queries/GetMany.ts","../src/providers/queries/GetManyReference.ts","../src/providers/commands/Update.ts","../src/providers/commands/UpdateMany.ts","../src/providers/commands/Create.ts","../src/providers/commands/Delete.ts","../src/providers/commands/Delete.Soft.ts","../src/providers/commands/DeleteMany.ts","../src/providers/commands/DeleteMany.Soft.ts","../src/providers/AuthProvider.ts"],"sourcesContent":["export function parseAllDatesDoc(obj: any) {\n  const isObject = !!obj && typeof obj === 'object';\n  if (!isObject) {\n    return;\n  }\n  Object.keys(obj).map(key => {\n    const value = obj[key];\n    obj[key] = recusivelyCheckObjectValue(value);\n  });\n}\n\nexport function recusivelyCheckObjectValue(input: any): any {\n  const isFalsey = !input;\n  if (isFalsey) {\n    return input;\n  }\n  const isPrimitive = typeof input !== 'object';\n  if (isPrimitive) {\n    return input;\n  }\n  const isTimestamp = !!input.toDate && typeof input.toDate === 'function';\n  if (isTimestamp) {\n    return input.toDate();\n  }\n  const isArray = Array.isArray(input);\n  if (isArray) {\n    return (input as []).map(value => recusivelyCheckObjectValue(value));\n  }\n  const isObject = typeof input === 'object';\n  if (isObject) {\n    Object.keys(input).map(key => {\n      const value = input[key];\n      input[key] = recusivelyCheckObjectValue(value);\n    });\n    return input;\n  }\n}\n","import { FireStoreDocumentSnapshot, FireStoreQueryDocumentSnapshot } from './firebase-models';\nimport { parseAllDatesDoc } from './timestamp-parser';\n\nexport const parseFireStoreDocument = (doc: FireStoreQueryDocumentSnapshot) => {\n  const data = doc.data();\n  parseAllDatesDoc(data);\n  // React Admin requires an id field on every document,\n  // So we can just using the firestore document id\n  return { id: doc.id, ...data };\n};\n","import { get, isEmpty } from 'lodash';\nimport { getFieldReferences, SearchObj } from './objectFlatten';\n\nexport function sortArray(\n  data: Array<{}>,\n  field: string,\n  dir: 'asc' | 'desc'\n): void {\n  data.sort((a: {}, b: {}) => {\n    const rawA = get(a, field);\n    const rawB = get(b, field);\n    const isAsc = dir === \"asc\";\n\n    const isNumberField = Number.isFinite(rawA) && Number.isFinite(rawB);\n    if (isNumberField) {\n      return basicSort(rawA, rawB, isAsc);\n    }\n    const isStringField = typeof rawA === 'string' && typeof rawB === 'string';\n    if (isStringField) {\n      const aParsed = rawA.toLowerCase();\n      const bParsed = rawB.toLowerCase();\n      return basicSort(aParsed, bParsed, isAsc);\n    }\n    const isDateField = rawA instanceof Date && rawB instanceof Date;\n    if (isDateField) {\n      return basicSort(rawA, rawB, isAsc);\n    }\n    return basicSort(!!rawA, !!rawB, isAsc);\n  });\n}\n\nfunction basicSort(aValue: any, bValue: any, isAsc: boolean) {\n  if (aValue > bValue) {\n    return isAsc ? 1 : -1;\n  }\n  if (aValue < bValue) {\n    return isAsc ? -1 : 1;\n  }\n  return 0;\n}\n\nexport function filterArray(\n  data: Array<{}>,\n  searchFields?: { [field: string]: string | number | boolean | null }\n): Array<{}> {\n  if (!searchFields || isEmpty(searchFields)) {\n    return data;\n  }\n  const searchObjs: SearchObj[] = [];\n  Object.keys(searchFields).map((fieldName) => {\n    const fieldValue = searchFields[fieldName];\n    const getSubObjects = getFieldReferences(fieldName, fieldValue);\n    searchObjs.push(...getSubObjects);\n  });\n  const filtered = data.filter((row) =>\n    searchObjs.reduce((acc, cur) => {\n      const res = doesRowMatch(row, cur.searchField, cur.searchValue);\n      return res && acc;\n    }, true as boolean)\n  );\n  return filtered;\n}\n\nexport function doesRowMatch(\n  row: {},\n  searchField: string,\n  searchValue: any\n): boolean {\n  const searchThis = get(row, searchField);\n  const bothAreFalsey = !searchThis && !searchValue;\n  if (bothAreFalsey) {\n    return true;\n  }\n  const nothingToSearch = !searchThis;\n  if (nothingToSearch) {\n    return false;\n  }\n  const isStringSearch = typeof searchValue === 'string';\n  if (isStringSearch) {\n    return searchThis\n      .toString()\n      .toLowerCase()\n      .includes(searchValue.toLowerCase());\n  }\n  const isBooleanOrNumber =\n    typeof searchValue === 'boolean' || typeof searchValue === 'number';\n  if (isBooleanOrNumber) {\n    return searchThis === searchValue;\n  }\n  const isArraySearch = Array.isArray(searchValue);\n  if (isArraySearch) {\n    return searchValue.includes(searchThis);\n  }\n  return false;\n}\n","type SearchValues = {} | number | string | boolean | null ;\ntype SearchValue = SearchValues | SearchValue[];\n\nexport interface SearchObj {\n  searchField: string;\n  searchValue: SearchValue;\n}\nexport function getFieldReferences(\n  fieldName: string,\n  value: {} | SearchValue\n): SearchObj[] {\n  const isFalsy = !value;\n  const isSimple = isFalsy ||\n    typeof value === 'string' ||\n    typeof value === 'number' ||\n    typeof value === 'boolean';\n\n  if (isSimple) {\n    return [\n      {\n        searchField: fieldName,\n        searchValue: value as SearchValue,\n      },\n    ];\n  }\n  const tree = {} as Record<string, SearchValue>;\n  tree[fieldName] = value;\n  return objectFlatten(tree);\n}\n\nexport function objectFlatten(tree: {}): SearchObj[] {\n  var leaves: SearchObj[] = [];\n  var recursivelyWalk = function (obj: any, path: string | null) {\n    path = path || \"\";\n    for (var key in obj) {\n      if (obj.hasOwnProperty(key)) {\n        const objVal = obj && obj[key];\n        const currentPath = !!path ? path + \".\" + key : key;\n        const isWalkable =\n          typeof objVal === 'object' || objVal instanceof Array;\n        if (isWalkable) {\n          recursivelyWalk(objVal, currentPath);\n        } else {\n          leaves.push({ searchField: currentPath, searchValue: objVal });\n        }\n      }\n    }\n  };\n  recursivelyWalk(tree, null);\n  return leaves;\n}\n","type LogFn = (...args: any) => void;\n\nexport const LogNoOp: LogFn = (...args: any) => null;\n\nexport class LoggerBase {\n  constructor(private title: string, private cacheEnabledKey: string) {}\n\n  private isEnabled() {\n    return !!localStorage.getItem(this.cacheEnabledKey);\n  }\n\n  SetEnabled(isEnabled: boolean) {\n    if (isEnabled) {\n      localStorage.setItem(this.cacheEnabledKey, 'true');\n    } else {\n      localStorage.removeItem(this.cacheEnabledKey);\n    }\n  }\n\n  public get log() {\n    if (!this.isEnabled()) {\n      return LogNoOp;\n    }\n    const boundLogFn: (...args: any) => void = console.log.bind(\n      console,\n      this.title\n    );\n    return boundLogFn;\n  }\n\n  public get warn() {\n    if (!this.isEnabled()) {\n      return LogNoOp;\n    }\n    const boundLogFn: (...args: any) => void = console.warn.bind(\n      console,\n      this.title\n    );\n    return boundLogFn;\n  }\n\n  public get error() {\n    if (!this.isEnabled()) {\n      return LogNoOp;\n    }\n    const boundLogFn: (...args: any) => void = console.error.bind(\n      console,\n      this.title\n    );\n    return boundLogFn;\n  }\n}\n","import { LoggerBase } from './logger-base';\n\nconst LOGGER_ENABLEDKEY = 'LOGGING_ENABLED';\nexport const logger = new LoggerBase('ðŸ”¥raf:', LOGGER_ENABLEDKEY);\n\nexport const log = logger.log;\nexport const logError = logger.error;\nexport const logWarn = logger.warn;\n","import { RAFirebaseOptions } from 'providers/options';\nimport { LogNoOp, LoggerBase } from './logger-base';\n\nconst LOGGER_ENABLEDKEY = 'LOGGING_FIRESTORE_COSTS_ENABLED';\nconst logger = new LoggerBase('ðŸ’¸firestore-costs:', LOGGER_ENABLEDKEY);\n\nconst KEY_SINGLE = 'firecosts-single-reads';\n\nexport interface IFirestoreLogger {\n  logDocument: (count: number) => Function;\n  SetEnabled: (isEnabled: boolean) => void;\n  ResetCount: (shouldReset: boolean) => void;\n}\n\nexport function MakeFirestoreLogger(\n  options: RAFirebaseOptions\n): IFirestoreLogger {\n  function notEnabled() {\n    return !options?.lazyLoading?.enabled;\n  }\n\n  function incrementRead(incrementBy = 1) {\n    const currentCountRaw = localStorage.getItem(KEY_SINGLE) || '';\n    const currentCount = parseInt(currentCountRaw) || 0;\n    const incremented = currentCount + incrementBy;\n    localStorage.setItem(KEY_SINGLE, incremented + '');\n    return incremented;\n  }\n  function clearCache() {\n    localStorage.removeItem(KEY_SINGLE);\n  }\n  return {\n    SetEnabled(isEnabled: boolean) {\n      logger.SetEnabled(isEnabled);\n    },\n    ResetCount(shouldReset: boolean) {\n      shouldReset && clearCache()\n    },\n    logDocument(docCount: number) {\n      if (notEnabled()) {\n        return LogNoOp;\n      }\n      const count = incrementRead(docCount);\n      const suffix = `+${docCount} (session total=${count} documents read)`;\n      const boundLogFn: (...args: any) => void = logger.log.bind(\n        console,\n        suffix\n      );\n      return boundLogFn;\n    },\n  };\n}\n","import { logError } from './logger';\nimport { IFirebaseWrapper } from '../providers/database/firebase/IFirebaseWrapper';\n\ninterface ParsedUpload {\n  fieldDotsPath: string;\n  fieldSlashesPath: string;\n  rawFile: File | any;\n}\n\nexport function parseDocGetAllUploads(obj: any): ParsedUpload[] {\n  const isObject = !!obj && typeof obj === \"object\";\n  if (!isObject) {\n    return [];\n  }\n  const uploads: ParsedUpload[] = [];\n  Object.keys(obj).map((key) => {\n    const value = obj[key];\n    recusivelyParseObjectValue(value, key, uploads);\n  });\n  return uploads;\n}\n\nexport function recusivelyParseObjectValue(\n  input: any,\n  fieldPath: string,\n  uploads: ParsedUpload[]\n): any {\n  const isFalsey = !input;\n  if (isFalsey) {\n    return input;\n  }\n  const isPrimitive = typeof input !== 'object';\n  if (isPrimitive) {\n    return input;\n  }\n  const isTimestamp = !!input.toDate && typeof input.toDate === 'function';\n  if (isTimestamp) {\n    return input.toDate();\n  }\n  const isArray = Array.isArray(input);\n  if (isArray) {\n    return (input as []).map((value, index) =>\n      recusivelyParseObjectValue(value, `${fieldPath}.${index}`, uploads)\n    );\n  }\n  const isObject = typeof input === 'object';\n  if (!isObject) {\n    return;\n  }\n  const isFileField = !!input && input.hasOwnProperty('rawFile');\n  if (isFileField) {\n    uploads.push({\n      fieldDotsPath: fieldPath,\n      fieldSlashesPath: fieldPath.split('.').join('/'),\n      rawFile: input.rawFile\n    });\n    delete input.rawFile;\n    return;\n  }\n  Object.keys(input).map((key) => {\n    const value = input[key];\n    recusivelyParseObjectValue(value, `${fieldPath}.${key}`, uploads);\n  });\n  return input;\n}\n\nexport const recursivelyMapStorageUrls = async (\n  fireWrapper: IFirebaseWrapper,\n  fieldValue: any\n): Promise<any> => {\n  const isArray = Array.isArray(fieldValue);\n  const isObject = !isArray && typeof fieldValue === \"object\";\n  const isFileField = isObject && !!fieldValue && fieldValue.hasOwnProperty(\"src\");\n  if (isFileField) {\n    const isAlreadyUploaded = fieldValue.src.startsWith('https://');\n    if (isAlreadyUploaded) {\n      return fieldValue;\n    }\n    try {\n      const src = await fireWrapper.getStorageDownloadUrl(fieldValue.src);\n      return {\n        ...fieldValue,\n        src\n      };\n    } catch (error) {\n      logError(`Error when getting download URL`, {\n        error,\n        fieldValue,\n      });\n      return fieldValue;\n    }\n  } else if (isObject) {\n    for (let key in fieldValue) {\n      if (fieldValue.hasOwnProperty(key)) {\n        const value = fieldValue[key];\n        fieldValue[key] = await recursivelyMapStorageUrls(fireWrapper, value);\n      }\n    }\n\n    return fieldValue;\n  } else if (isArray) {\n    for (let i = 0; i < fieldValue.length; i++) {\n      fieldValue[i] = await recursivelyMapStorageUrls(fireWrapper, fieldValue[i])\n    }\n\n    return fieldValue;\n  }\n\n  return fieldValue;\n};\n","import path from \"path-browserify\";\n\nexport function getAbsolutePath(\n  rootRef: undefined | string | (() => string),\n  relativePath: string | null\n): string {\n  if (!rootRef) {\n    return relativePath+'';\n  }\n  if (!relativePath) {\n    throw new Error(\n      \"Resource name must be a string of length greater than 0 characters\"\n    );\n  }\n  const rootRefValue = typeof rootRef === \"string\" ? rootRef : rootRef();\n  const withSlashes = path.join(\"/\", rootRefValue, \"/\", relativePath, \"/\");\n  const slashCount = withSlashes.split(\"/\").length - 1;\n  if (slashCount % 2) {\n    throw new Error(`The rootRef path must point to a \"document\"\n    not a \"collection\"e.g. /collection/document/ or\n    /collection/document/collection/document/`);\n  }\n  return withSlashes.slice(1, -1);\n}\n\nexport function joinPaths(...args: string[]) {\n  return path.join(...args);\n}\n","import {\n  IFirebaseWrapper,\n} from './IFirebaseWrapper';\n\nimport firebase from 'firebase/compat/app';\nimport 'firebase/compat/auth';\nimport 'firebase/compat/firestore';\nimport 'firebase/compat/storage';\n\nimport { log } from 'misc';\nimport { RAFirebaseOptions } from 'providers/options';\nimport {\n  FireApp,\n  FireAuth,\n  FireAuthUserCredentials,\n  FireStorage,\n  FireStoragePutFileResult,\n  FireStore,\n  FireStoreBatch,\n  FireStoreCollectionRef,\n  FireUploadTaskSnapshot,\n  FireUser\n} from 'misc/firebase-models';\n\nexport class FirebaseWrapper implements IFirebaseWrapper {\n  private firestore: FireStore;\n  private app: FireApp;\n  public options: RAFirebaseOptions;\n\n  constructor(\n    inputOptions: RAFirebaseOptions | undefined,\n    firebaseConfig: {},\n  ) { \n    const optionsSafe = inputOptions || {};\n    this.options = optionsSafe;\n    this.app = (window as any)['_app'] = ObtainFirebaseApp(firebaseConfig, optionsSafe);\n    this.firestore = this.app.firestore();\n  }\n  dbGetCollection(absolutePath: string): FireStoreCollectionRef {\n    return this.firestore.collection(absolutePath);\n  }\n  dbCreateBatch(): FireStoreBatch {\n    return this.firestore.batch();\n  }\n  dbMakeNewId(): string {\n    return this.firestore.collection(\"collections\").doc().id\n  }\n\n  public OnUserLogout(callBack: (u: FireUser | null) => any) {\n    this.app.auth().onAuthStateChanged((user) => {\n      const isLoggedOut = !user;\n      log('FirebaseWrapper.OnUserLogout', { user, isLoggedOut });\n      if (isLoggedOut) {\n        callBack(user);\n      }\n    });\n  }\n  putFile(storagePath: string, rawFile: any): FireStoragePutFileResult {\n    const task = this.app.storage().ref(storagePath).put(rawFile);\n    const taskResult = new Promise<FireUploadTaskSnapshot>(\n      (res, rej) => task.then(res).catch(rej)\n    );\n    const downloadUrl = taskResult.then(t => t.ref.getDownloadURL()).then(url => url as string)\n    return {\n      task,\n      taskResult,\n      downloadUrl,\n    }\n  }\n  async getStorageDownloadUrl(fieldSrc: string): Promise<string> {\n    return this.app.storage().ref(fieldSrc).getDownloadURL();\n  }\n  public serverTimestamp() {\n    // This line doesn't work for some reason, might be firebase sdk.\n    return firebase.firestore.FieldValue.serverTimestamp();\n  }\n  async authSetPersistence(persistenceInput: 'session' | 'local' | 'none') {\n    let persistenceResolved: string;\n    switch (persistenceInput) {\n      case 'local':\n        persistenceResolved = firebase.auth.Auth.Persistence.LOCAL;\n        break;\n      case 'none':\n        persistenceResolved = firebase.auth.Auth.Persistence.NONE;\n        break;\n      case 'session':\n      default:\n        persistenceResolved = firebase.auth.Auth.Persistence.SESSION;\n        break;\n    }\n    log('setPersistence', { persistenceInput, persistenceResolved });\n    return this.app.auth()\n      .setPersistence(persistenceResolved)\n      .catch((error) => console.error(error));\n  }\n  async authSigninEmailPassword(email: string, password: string): Promise<FireAuthUserCredentials> {\n    const user = await this.app.auth().signInWithEmailAndPassword(\n      email,\n      password\n    );\n    return user;\n  }\n  async authSignOut(): Promise<void> {\n    return this.app.auth().signOut();\n  }\n  async authGetUserLoggedIn(): Promise<FireUser> {\n    return new Promise((resolve, reject) => {\n      const auth = this.app.auth();\n      if (auth.currentUser) return resolve(auth.currentUser);\n      const unsubscribe = this.app.auth().onAuthStateChanged((user) => {\n        unsubscribe();\n        if (user) {\n          resolve(user);\n        } else {\n          reject();\n        }\n      });\n    });\n  }\n  public async GetUserLogin(): Promise<FireUser> {\n    return this.authGetUserLoggedIn();\n  }\n\n  /** @deprecated */\n  public auth(): FireAuth {\n    return this.app.auth();\n  }\n  /** @deprecated */\n  public storage(): FireStorage {\n    return this.app.storage();\n  }\n  /** @deprecated */\n  public GetApp(): FireApp {\n    return this.app;\n  }\n  /** @deprecated */\n  public db(): FireStore {\n    return this.firestore;\n  }\n}\n\nfunction ObtainFirebaseApp(\n  firebaseConfig: {},\n  options: RAFirebaseOptions\n): firebase.app.App {\n  if (options.app) {\n    return options.app;\n  }\n  const isInitialized = !!firebase.apps?.length;\n  if (isInitialized) {\n    return firebase.app();\n  } else {\n    return firebase.initializeApp(firebaseConfig);\n  }\n}\n","import { RAFirebaseOptions } from '../options';\nimport { IFirebaseWrapper } from './firebase/IFirebaseWrapper';\nimport {\n  log,\n  getAbsolutePath,\n  messageTypes,\n  parseAllDatesDoc,\n  logWarn,\n  IFirestoreLogger,\n} from '../../misc';\nimport { FireStoreCollectionRef, FireStoreDocumentSnapshot, FireStoreQueryDocumentSnapshot } from 'misc/firebase-models';\n\nexport interface IResource {\n  path: string;\n  pathAbsolute: string;\n  collection: FireStoreCollectionRef;\n  list: Array<{} & { deleted?: boolean }>;\n}\n\nexport class ResourceManager {\n  private resources: Record<string, IResource> = {};\n\n  constructor(\n    private fireWrapper: IFirebaseWrapper,\n    private options: RAFirebaseOptions,\n    private flogger: IFirestoreLogger\n  ) {\n    this.fireWrapper.OnUserLogout(() => {\n      this.resources = {};\n    });\n  }\n\n  public async TryGetResource(\n    resourceName: string,\n    refresh?: 'REFRESH',\n    collectionQuery?: messageTypes.CollectionQueryType\n  ): Promise<IResource> {\n    if (refresh) {\n      await this.RefreshResource(resourceName, collectionQuery);\n    }\n    return this.TryGetResourcePromise(resourceName, collectionQuery);\n  }\n\n  public GetResource(relativePath: string): IResource {\n    const resource: IResource = this.resources[relativePath];\n    if (!resource) {\n      throw new Error(\n        `react-admin-firebase: Can't find resource: \"${relativePath}\"`\n      );\n    }\n    return resource;\n  }\n\n  public async TryGetResourcePromise(\n    relativePath: string,\n    collectionQuery?: messageTypes.CollectionQueryType\n  ): Promise<IResource> {\n    log('resourceManager.TryGetResourcePromise', {\n      relativePath,\n      collectionQuery,\n    });\n    await this.initPath(relativePath);\n\n    const resource: IResource = this.resources[relativePath];\n    if (!resource) {\n      throw new Error(\n        `react-admin-firebase: Cant find resource: \"${relativePath}\"`\n      );\n    }\n    return resource;\n  }\n\n  public async RefreshResource(\n    relativePath: string,\n    collectionQuery: messageTypes.CollectionQueryType | undefined\n  ) {\n    if (this.options?.lazyLoading?.enabled) {\n      logWarn('resourceManager.RefreshResource', {\n        warn: 'RefreshResource is not available in lazy loading mode',\n      });\n      throw new Error(\n        'react-admin-firebase: RefreshResource is not available in lazy loading mode'\n      );\n    }\n\n    log('resourceManager.RefreshResource', { relativePath, collectionQuery });\n    await this.initPath(relativePath);\n    const resource = this.resources[relativePath];\n\n    const collection = resource.collection;\n    const query = this.applyQuery(collection, collectionQuery);\n    const newDocs = await query.get();\n\n    resource.list = newDocs.docs.map((doc) => this.parseFireStoreDocument(doc));\n    const count = newDocs.docs.length;\n    this.flogger.logDocument(count)();\n    log('resourceManager.RefreshResource', {\n      newDocs,\n      resource,\n      collectionPath: collection.path,\n    });\n  }\n\n  public async GetSingleDoc(relativePath: string, docId: string) {\n    await this.initPath(relativePath);\n    const resource = this.GetResource(relativePath);\n    this.flogger.logDocument(1)();\n    const docSnap = await resource.collection.doc(docId).get();\n    if (!docSnap.exists) {\n      throw new Error('react-admin-firebase: No id found matching: ' + docId);\n    }\n    const result = this.parseFireStoreDocument(docSnap);\n    log('resourceManager.GetSingleDoc', {\n      relativePath,\n      resource,\n      docId,\n      docSnap,\n      result,\n    });\n    return result;\n  }\n\n  private async initPath(relativePath: string): Promise<void> {\n    const rootRef = this.options && this.options.rootRef;\n    const absolutePath = getAbsolutePath(rootRef, relativePath);\n    const hasBeenInited = !!this.resources[relativePath];\n    log('resourceManager.initPath()', {\n      absolutePath,\n      hasBeenInited,\n    });\n    if (hasBeenInited) {\n      log('resourceManager.initPath() has been initialized already...');\n      return;\n    }\n    const collection = this.fireWrapper.dbGetCollection(absolutePath);\n    const list: Array<{}> = [];\n    const resource: IResource = {\n      collection,\n      list,\n      path: relativePath,\n      pathAbsolute: absolutePath,\n    };\n    this.resources[relativePath] = resource;\n    log('resourceManager.initPath() setting resource...', {\n      resource,\n      allResources: this.resources,\n      collection: collection,\n      collectionPath: collection.path,\n    });\n  }\n\n  private parseFireStoreDocument(doc: FireStoreQueryDocumentSnapshot | FireStoreDocumentSnapshot | undefined): {} {\n    if (!doc) {\n      logWarn('parseFireStoreDocument: no doc', { doc });\n      return {};\n    }\n    const data = doc.data();\n    parseAllDatesDoc(data);\n    // React Admin requires an id field on every document,\n    // So we can just using the firestore document id\n    return { id: doc.id, ...data };\n  }\n\n  public async getUserIdentifier(): Promise<string> {\n    const identifier = this.options.associateUsersById\n      ? await this.getCurrentUserId()\n      : await this.getCurrentUserEmail();\n    return identifier;\n  }\n\n  private async getCurrentUserEmail() {\n    const user = await this.fireWrapper.authGetUserLoggedIn();\n    if (user) {\n      return user.email as string;\n    } else {\n      return 'annonymous user';\n    }\n  }\n  private async getCurrentUserId() {\n    const user = await this.fireWrapper.authGetUserLoggedIn();\n    if (user) {\n      return user.uid;\n    } else {\n      return 'annonymous user';\n    }\n  }\n\n  private applyQuery(\n    collection: FireStoreCollectionRef,\n    collectionQuery?: messageTypes.CollectionQueryType\n  ): FireStoreCollectionRef {\n    const collRef = collectionQuery ? collectionQuery(collection) : collection;\n\n    log('resourceManager.applyQuery() ...', {\n      collection,\n      collectionQuery: (collectionQuery || '-').toString(),\n      collRef,\n    });\n    return collRef;\n  }\n}\n","import { set, get } from \"lodash\";\nimport {\n  AddCreatedByFields,\n  AddUpdatedByFields,\n  IFirestoreLogger,\n  joinPaths,\n  log,\n  logError,\n  parseDocGetAllUploads,\n} from \"../../misc\";\nimport { RAFirebaseOptions } from \"../options\";\nimport { IFirebaseWrapper } from \"./firebase/IFirebaseWrapper\";\nimport { IResource, ResourceManager } from \"./ResourceManager\";\n\nexport class FireClient {\n  public rm: ResourceManager;\n\n  constructor(\n    public fireWrapper: IFirebaseWrapper,\n    public options: RAFirebaseOptions,\n    public flogger: IFirestoreLogger\n  ) {\n    this.rm = new ResourceManager(this.fireWrapper, this.options, this.flogger);\n  }\n\n  public checkRemoveIdField(obj: any, docId: string) {\n    if (!this.options.dontAddIdFieldToDoc) {\n      obj.id = docId;\n    }\n  }\n\n  public async parseDataAndUpload(r: IResource, id: string, data: any) {\n    if (!data) {\n      return data;\n    }\n    const docPath = r.collection.doc(id).path;\n\n    const uploads = parseDocGetAllUploads(data);\n    await Promise.all(\n      uploads.map(async (u) => {\n        const link = await this.uploadAndGetLink(\n          u.rawFile,\n          docPath,\n          u.fieldSlashesPath,\n          !!this.options.useFileNamesInStorage\n        );\n        set(data, u.fieldDotsPath + \".src\", link);\n      })\n    );\n    return data;\n  }\n\n  public async addCreatedByFields(obj: any) {\n    return AddCreatedByFields(obj, this.fireWrapper, this.rm, this.options);\n  }\n\n  public async addUpdatedByFields(obj: any) {\n    return AddUpdatedByFields(obj, this.fireWrapper, this.rm, this.options);\n  }\n\n  private async uploadAndGetLink(\n    rawFile: any,\n    docPath: string,\n    fieldPath: string,\n    useFileName: boolean\n  ): Promise<string | undefined> {\n    const storagePath = useFileName\n      ? joinPaths(docPath, fieldPath, rawFile.name)\n      : joinPaths(docPath, fieldPath);\n    return this.saveFile(storagePath, rawFile);\n  }\n\n  private async saveFile(\n    storagePath: string,\n    rawFile: any\n  ): Promise<string | undefined> {\n    log(\"saveFile() saving file...\", { storagePath, rawFile });\n    try {\n      const { taskResult, downloadUrl } = this.fireWrapper.putFile(storagePath, rawFile);\n      const getDownloadURL = await downloadUrl;\n      log(\"saveFile() saved file\", {\n        storagePath,\n        taskResult,\n        getDownloadURL,\n      });\n      return this.options.relativeFilePaths ? storagePath : getDownloadURL;\n    } catch (storageError) {\n      if (get(storageError, 'code') === \"storage/unknown\") {\n        logError(\n          'saveFile() error saving file, No bucket found! Try clicking \"Get Started\" in firebase -> storage',\n          { storageError }\n        );\n      } else {\n        logError(\"saveFile() error saving file\", {\n          storageError,\n        });\n      }\n    }\n  }\n}\n","import { RAFirebaseOptions } from \"index\";\nimport { IFirebaseWrapper, ResourceManager } from \"providers/database\";\n\nexport async function AddCreatedByFields(\n  obj: any,\n  fireWrapper: IFirebaseWrapper,\n  rm: Pick<ResourceManager, \"getUserIdentifier\">,\n  options: Pick<\n    RAFirebaseOptions,\n    | \"associateUsersById\"\n    | \"disableMeta\"\n    | \"renameMetaFields\"\n    | \"metaFieldCasing\"\n  >\n) {\n  if (options.disableMeta) {\n    return;\n  }\n  const currentUserIdentifier = await rm.getUserIdentifier();\n  const createAtSelector = GetSelectorsCreateAt(options);\n  const createBySelector = GetSelectorsCreateBy(options);\n  obj[createAtSelector] = fireWrapper.serverTimestamp();\n  obj[createBySelector] = currentUserIdentifier;\n}\n\nexport async function AddUpdatedByFields(\n  obj: any,\n  fireWrapper: IFirebaseWrapper,\n  rm: Pick<ResourceManager, \"getUserIdentifier\">,\n  options: Pick<\n    RAFirebaseOptions,\n    | \"associateUsersById\"\n    | \"disableMeta\"\n    | \"renameMetaFields\"\n    | \"metaFieldCasing\"\n  >\n) {\n  if (options.disableMeta) {\n    return;\n  }\n  const currentUserIdentifier = await rm.getUserIdentifier();\n  const updateAtSelector = GetSelectorsUpdateAt(options);\n  const updateBySelector = GetSelectorsUpdateBy(options);\n  obj[updateAtSelector] = fireWrapper.serverTimestamp();\n  obj[updateBySelector] = currentUserIdentifier;\n}\n\nexport function GetSelectorsUpdateAt(\n  options: Pick<RAFirebaseOptions, \"metaFieldCasing\" | \"renameMetaFields\">\n): string {\n  if (options.renameMetaFields && options.renameMetaFields.updated_at) {\n    return options.renameMetaFields.updated_at;\n  }\n  const casing = options.metaFieldCasing;\n  const defautCase = \"lastupdate\";\n  if (!casing) {\n    return defautCase;\n  }\n  if (casing === \"camel\") {\n    return \"lastUpdate\";\n  }\n  if (casing === \"snake\") {\n    return \"last_update\";\n  }\n  if (casing === \"pascal\") {\n    return \"LastUpdate\";\n  }\n  if (casing === \"kebab\") {\n    return \"last-update\";\n  }\n  return defautCase;\n}\n\nexport function GetSelectorsUpdateBy(\n  options: Pick<RAFirebaseOptions, \"metaFieldCasing\" | \"renameMetaFields\">\n): string {\n  if (options.renameMetaFields && options.renameMetaFields.updated_by) {\n    return options.renameMetaFields.updated_by;\n  }\n  const casing = options.metaFieldCasing;\n  const defautCase = \"updatedby\";\n  if (!casing) {\n    return defautCase;\n  }\n  if (casing === \"camel\") {\n    return \"updatedBy\";\n  }\n  if (casing === \"snake\") {\n    return \"updated_by\";\n  }\n  if (casing === \"pascal\") {\n    return \"UpdatedBy\";\n  }\n  if (casing === \"kebab\") {\n    return \"updated-by\";\n  }\n  return defautCase;\n}\n\nexport function GetSelectorsCreateAt(\n  options: Pick<RAFirebaseOptions, \"metaFieldCasing\" | \"renameMetaFields\">\n): string {\n  if (options.renameMetaFields && options.renameMetaFields.created_at) {\n    return options.renameMetaFields.created_at;\n  }\n  const casing = options.metaFieldCasing;\n  const defautCase = \"createdate\";\n  if (!casing) {\n    return defautCase;\n  }\n  if (casing === \"camel\") {\n    return \"createDate\";\n  }\n  if (casing === \"snake\") {\n    return \"create_date\";\n  }\n  if (casing === \"pascal\") {\n    return \"CreateDate\";\n  }\n  if (casing === \"kebab\") {\n    return \"create-date\";\n  }\n  return defautCase;\n}\n\nexport function GetSelectorsCreateBy(\n  options: Pick<RAFirebaseOptions, \"metaFieldCasing\" | \"renameMetaFields\">\n): string {\n  if (options.renameMetaFields && options.renameMetaFields.created_by) {\n    return options.renameMetaFields.created_by;\n  }\n  const casing = options.metaFieldCasing;\n  const defautCase = \"createdby\";\n  if (!casing) {\n    return defautCase;\n  }\n  if (casing === \"camel\") {\n    return \"createdBy\";\n  }\n  if (casing === \"snake\") {\n    return \"created_by\";\n  }\n  if (casing === \"pascal\") {\n    return \"CreatedBy\";\n  }\n  if (casing === \"kebab\") {\n    return \"created-by\";\n  }\n  return defautCase;\n}\n","import { FireStoreCollectionRef, FireStoreDocumentSnapshot, FireStoreQuery } from 'misc/firebase-models';\nimport { IFirestoreLogger, messageTypes } from '../../misc';\n\nexport function setQueryCursor(\n  doc: FireStoreDocumentSnapshot,\n  params: messageTypes.IParamsGetList,\n  resourceName: string\n) {\n  const key = btoa(JSON.stringify({ ...params, resourceName }));\n  localStorage.setItem(key, doc.id);\n\n  const allCursorsKey = `ra-firebase-cursor-keys_${resourceName}`;\n  const localCursorKeys = localStorage.getItem(allCursorsKey);\n  if (!localCursorKeys) {\n    localStorage.setItem(allCursorsKey, JSON.stringify([key]));\n  } else {\n    const cursors: string[] = JSON.parse(localCursorKeys);\n    const newCursors = cursors.concat(key);\n    localStorage.setItem(allCursorsKey, JSON.stringify(newCursors));\n  }\n}\n\nexport async function getQueryCursor(\n  collection: FireStoreCollectionRef,\n  params: messageTypes.IParamsGetList,\n  resourceName: string,\n  flogger: IFirestoreLogger\n): Promise<FireStoreDocumentSnapshot | false> {\n  const key = btoa(JSON.stringify({ ...params, resourceName }));\n  const docId = localStorage.getItem(key);\n  if (!docId) {\n    return false;\n  }\n\n  const doc = await collection.doc(docId).get();\n  flogger.logDocument(1)();\n  if (doc.exists) {\n    // incrementFirebaseReadsCounter(1);\n    return doc;\n  }\n  return false;\n}\n\nexport function clearQueryCursors(resourceName: string) {\n  const allCursorsKey = `ra-firebase-cursor-keys_${resourceName}`;\n  const localCursorKeys = localStorage.getItem(allCursorsKey);\n  if (localCursorKeys) {\n    const cursors: string[] = JSON.parse(localCursorKeys);\n    cursors.forEach((cursor) => localStorage.removeItem(cursor));\n    localStorage.removeItem(allCursorsKey);\n  }\n}\n\nexport async function findLastQueryCursor(\n  collection: FireStoreCollectionRef,\n  queryBase: FireStoreQuery,\n  params: messageTypes.IParamsGetList,\n  resourceName: string,\n  flogger: IFirestoreLogger\n) {\n  const { page, perPage } = params.pagination;\n\n  let lastQueryCursor: FireStoreDocumentSnapshot | false = false;\n  let currentPage = page - 1;\n\n  const currentPageParams = {\n    ...params,\n    pagination: {\n      ...params.pagination,\n    },\n  };\n  while (!lastQueryCursor && currentPage > 1) {\n    currentPage--;\n    currentPageParams.pagination.page = currentPage;\n    console.log('getting query cursor currentPage=', currentPage);\n    lastQueryCursor = await getQueryCursor(\n      collection,\n      currentPageParams,\n      resourceName,\n      flogger\n    );\n  }\n  const limit = (page - currentPage) * perPage;\n  const isFirst = currentPage === 1;\n\n  function getQuery() {\n    if (isFirst) {\n      return queryBase.limit(limit);\n    } else {\n      return queryBase.startAt(lastQueryCursor).limit(limit);\n    }\n  }\n\n  const newQuery = getQuery();\n  const snapshots = await newQuery.get();\n  const docsLength = snapshots.docs.length;\n  flogger.logDocument(docsLength)();\n  const lastDocIndex = docsLength - 1;\n  const lastDocRef = snapshots.docs[lastDocIndex];\n  return lastDocRef;\n}\n","import { FireStoreCollectionRef, FireStoreQuery, FireStoreQueryOrder } from 'misc/firebase-models';\nimport { IFirestoreLogger, messageTypes } from '../../misc';\nimport { findLastQueryCursor, getQueryCursor } from './queryCursors';\n\ninterface ParamsToQueryOptions {\n  filters?: boolean;\n  sort?: boolean;\n  pagination?: boolean;\n}\n\nconst defaultParamsToQueryOptions = {\n  filters: true,\n  sort: true,\n  pagination: true,\n};\n\nexport async function paramsToQuery<\n  TParams extends messageTypes.IParamsGetList\n>(\n  collection: FireStoreCollectionRef,\n  params: TParams,\n  resourceName: string,\n  flogger: IFirestoreLogger,\n  options: ParamsToQueryOptions = defaultParamsToQueryOptions\n): Promise<FireStoreQuery> {\n  const filtersStepQuery = options.filters\n    ? filtersToQuery(collection, params.filter)\n    : collection;\n\n  const sortStepQuery = options.sort\n    ? sortToQuery(filtersStepQuery, params.sort)\n    : filtersStepQuery;\n\n  return options.pagination\n    ? paginationToQuery(\n        sortStepQuery,\n        params,\n        collection,\n        resourceName,\n        flogger\n      )\n    : sortStepQuery;\n}\n\nexport function filtersToQuery(\n  query: FireStoreQuery,\n  filters: { [fieldName: string]: any }\n): FireStoreQuery {\n  const res = Object.entries(filters).reduce((acc,[fieldName, fieldValue]) => {\n    const opStr = fieldValue && Array.isArray(fieldValue) ? 'in' : '==';\n    return acc.where(fieldName, opStr, fieldValue);\n  }, query);\n  return res;\n}\n\nexport function sortToQuery(\n  query: FireStoreQuery,\n  sort: { field: string; order: string }\n): FireStoreQuery {\n  if (sort != null && sort.field !== 'id') {\n    const { field, order } = sort;\n    const parsedOrder = order.toLocaleLowerCase() as FireStoreQueryOrder;\n    return query.orderBy(field, parsedOrder);\n  }\n  return query;\n}\n\nasync function paginationToQuery<TParams extends messageTypes.IParamsGetList>(\n  query: FireStoreQuery,\n  params: TParams,\n  collection: FireStoreCollectionRef,\n  resourceName: string,\n  flogger: IFirestoreLogger\n): Promise<FireStoreQuery> {\n  const { page, perPage } = params.pagination;\n  if (page === 1) {\n    query = query.limit(perPage);\n  } else {\n    let queryCursor = await getQueryCursor(\n      collection,\n      params,\n      resourceName,\n      flogger\n    );\n    if (!queryCursor) {\n      queryCursor = await findLastQueryCursor(\n        collection,\n        query,\n        params,\n        resourceName,\n        flogger\n      );\n    }\n    query = query.startAfter(queryCursor).limit(perPage);\n  }\n\n  return query;\n}\n\nexport function getFullParamsForQuery<\n  TParams extends messageTypes.IParamsGetList\n>(reactAdminParams: TParams, softdeleteEnabled: boolean): TParams {\n  return {\n    ...reactAdminParams,\n    filter: softdeleteEnabled\n      ? {\n          deleted: false,\n          ...reactAdminParams.filter,\n        }\n      : reactAdminParams.filter,\n  };\n}\n\nexport function getNextPageParams<TParams extends messageTypes.IParamsGetList>(\n  params: TParams\n): TParams {\n  return {\n    ...params,\n    pagination: {\n      ...params.pagination,\n      page: params.pagination.page + 1,\n    },\n  };\n}\n","import {\n  log,\n  messageTypes,\n  parseFireStoreDocument,\n  recursivelyMapStorageUrls,\n} from '../../misc';\nimport { IResource, ResourceManager } from '../database/ResourceManager';\nimport { RAFirebaseOptions } from '../options';\nimport * as ra from '../../misc/react-admin-models';\nimport {\n  getFullParamsForQuery,\n  getNextPageParams,\n  paramsToQuery,\n} from './paramsToQuery';\nimport { clearQueryCursors, setQueryCursor } from './queryCursors';\nimport { FireClient } from 'providers/database';\nimport { FireStoreCollectionRef, FireStoreDocumentSnapshot } from 'misc/firebase-models';\n\nexport class FirebaseLazyLoadingClient {\n  constructor(\n    private readonly options: RAFirebaseOptions,\n    private readonly rm: ResourceManager,\n    private client: FireClient\n  ) {}\n\n  public async apiGetList<T extends ra.Record>(\n    resourceName: string,\n    reactAdminParams: ra.GetListParams\n  ): Promise<ra.GetListResult<T>> {\n    const r = await this.tryGetResource(resourceName);\n    const params = getFullParamsForQuery(\n      reactAdminParams,\n      !!this.options.softDelete\n    );\n\n    log('apiGetListLazy', { resourceName, params });\n\n    const query = await paramsToQuery(\n      r.collection,\n      params,\n      resourceName,\n      this.client.flogger\n    );\n\n    const snapshots = await query.get();\n\n    const resultsCount = snapshots.docs.length;\n    if (!resultsCount) {\n      log('apiGetListLazy', {\n        message: 'There are not records for given query',\n      });\n      return { data: [], total: 0 };\n    }\n    this.client.flogger.logDocument(resultsCount)();\n\n    const data = snapshots.docs.map(d => parseFireStoreDocument(d)) as T[];\n    const nextPageCursor = snapshots.docs[snapshots.docs.length - 1];\n    // After fetching documents save queryCursor for next page\n    setQueryCursor(nextPageCursor, getNextPageParams(params), resourceName);\n    // Hardcoded to allow next pages, as we don't have total number of items\n    let total = 9000;\n\n    // Check for next pages\n    // If it's last page, we can count all items and disable going to next page\n    const isOnLastPage = await this.checkIfOnLastPage(\n      r.collection,\n      params,\n      resourceName,\n      nextPageCursor\n    );\n\n    if (isOnLastPage) {\n      const { page, perPage } = params.pagination;\n      total = (page - 1) * perPage + data.length;\n      log('apiGetListLazy', { message: \"It's last page of collection.\" });\n    }\n\n    if (this.options.relativeFilePaths) {\n      const parsedData = await Promise.all(\n        data.map(async (doc: any) => {\n          for (let fieldName in doc) {\n            doc[fieldName] = await recursivelyMapStorageUrls(\n              this.client.fireWrapper,\n              doc[fieldName]\n            );\n          }\n          return doc;\n        })\n      );\n\n      log('apiGetListLazy result', {\n        docs: parsedData,\n        resource: r,\n        collectionPath: r.collection.path,\n      });\n\n      return {\n        data: parsedData,\n        total,\n      };\n    }\n\n    log('apiGetListLazy result', {\n      docs: data,\n      resource: r,\n      collectionPath: r.collection.path,\n    });\n\n    return { data, total };\n  }\n\n  public async apiGetManyReference(\n    resourceName: string,\n    reactAdminParams: messageTypes.IParamsGetManyReference\n  ): Promise<messageTypes.IResponseGetManyReference> {\n    const r = await this.tryGetResource(resourceName);\n    log('apiGetManyReferenceLazy', {\n      resourceName,\n      resource: r,\n      reactAdminParams,\n    });\n    const filterWithTarget = {\n      ...reactAdminParams.filter,\n      [reactAdminParams.target]: reactAdminParams.id,\n    };\n    const params = getFullParamsForQuery(\n      {\n        ...reactAdminParams,\n        filter: filterWithTarget,\n      },\n      !!this.options.softDelete\n    );\n\n    const query = await paramsToQuery(\n      r.collection,\n      params,\n      resourceName,\n      this.client.flogger\n    );\n\n    const snapshots = await query.get();\n    const resultsCount = snapshots.docs.length;\n    this.client.flogger.logDocument(resultsCount)();\n    const data = snapshots.docs.map(d => parseFireStoreDocument(d));\n    if (this.options.relativeFilePaths) {\n      const parsedData = await Promise.all(\n        data.map(async (doc: any) => {\n          for (let fieldName in doc) {\n            doc[fieldName] = await recursivelyMapStorageUrls(\n              this.client.fireWrapper,\n              doc[fieldName]\n            );\n          }\n          return doc;\n        })\n      );\n\n      log('apiGetManyReferenceLazy result', {\n        docs: parsedData,\n        resource: r,\n        collectionPath: r.collection.path,\n      });\n\n      return {\n        data: parsedData,\n        total: data.length,\n      };\n    }\n\n    log('apiGetManyReferenceLazy result', {\n      docs: data,\n      resource: r,\n      collectionPath: r.collection.path,\n    });\n    return { data, total: data.length };\n  }\n\n  private async checkIfOnLastPage<TParams extends messageTypes.IParamsGetList>(\n    collection: FireStoreCollectionRef,\n    params: TParams,\n    resourceName: string,\n    nextPageCursor: FireStoreDocumentSnapshot,\n  ): Promise<boolean> {\n    const query = await paramsToQuery(\n      collection,\n      params,\n      resourceName,\n      this.client.flogger,\n      {\n        filters: true,\n        sort: true,\n      }\n    );\n    if (!nextPageCursor) {\n      throw new Error('Page cursor was empty...');\n    }\n    const nextElementSnapshot = await query\n      .startAfter(nextPageCursor)\n      .limit(1)\n      .get();\n\n    if (!nextElementSnapshot.empty) {\n      // this.incrementFirebaseReadsCounter(1);\n    }\n\n    return nextElementSnapshot.empty;\n  }\n\n  public clearQueryCursors(resourceName: string) {\n    clearQueryCursors(resourceName);\n  }\n\n  private async tryGetResource(\n    resourceName: string,\n    collectionQuery?: messageTypes.CollectionQueryType\n  ): Promise<IResource> {\n    return this.rm.TryGetResourcePromise(resourceName, collectionQuery);\n  }\n}\n","import {\n  getAbsolutePath,\n  log,\n  logger,\n  retrieveStatusCode,\n  logError,\n  MakeFirestoreLogger,\n} from \"../misc\";\nimport * as ra from \"../misc/react-admin-models\";\nimport { RAFirebaseOptions } from \"./options\";\nimport { FirebaseWrapper } from \"./database/firebase/FirebaseWrapper\";\nimport { FireApp } from \"../misc/firebase-models\";\nimport { FireClient } from \"./database/FireClient\";\nimport { GetList, GetMany, GetManyReference, GetOne } from \"./queries\";\nimport { Create, Delete, DeleteMany, Update, UpdateMany } from \"./commands\";\n\nexport interface IDataProvider extends ra.DataProvider {\n  app: FireApp;\n}\n\nexport function DataProvider(\n  firebaseConfig: {},\n  optionsInput?: RAFirebaseOptions\n): IDataProvider {\n  const options = optionsInput || {};\n  verifyDataProviderArgs(firebaseConfig, options);\n\n  const flogger = MakeFirestoreLogger(options);\n  logger.SetEnabled(!!options?.logging);\n  flogger.SetEnabled(!!options?.firestoreCostsLogger?.enabled);\n  flogger.ResetCount(!options?.firestoreCostsLogger?.persistCount);\n  log('Creating FirebaseDataProvider', {\n    firebaseConfig,\n    options\n  });\n\n  const fireWrapper = new FirebaseWrapper(optionsInput, firebaseConfig);\n\n  async function run<T>(cb: () => Promise<T>) {\n    let res: any;\n    try {\n      res = await cb();\n      return res;\n    } catch (error) {\n      const errorMsg = ((error as any) || '').toString();\n      const code = retrieveStatusCode(errorMsg);\n      const errorObj = { status: code, message: errorMsg, json: res };\n      logError(\"DataProvider:\", error, { errorMsg, code, errorObj });\n      throw errorObj;\n    }\n  }\n  const client = new FireClient(fireWrapper, options, flogger);\n\n  const newProviderApi: IDataProvider = {\n    app: fireWrapper.GetApp(),\n    getList<RecordType extends ra.Record = ra.Record>(\n      resource: string,\n      params: ra.GetListParams\n    ): Promise<ra.GetListResult<RecordType>> {\n      return run(() => GetList<RecordType>(resource, params, client));\n    },\n    getOne<RecordType extends ra.Record = ra.Record>(\n      resource: string,\n      params: ra.GetOneParams\n    ): Promise<ra.GetOneResult<RecordType>> {\n      return run(() => GetOne<RecordType>(resource, params, client));\n    },\n    getMany<RecordType extends ra.Record = ra.Record>(\n      resource: string,\n      params: ra.GetManyParams\n    ): Promise<ra.GetManyResult<RecordType>> {\n      return run(() => GetMany<RecordType>(resource, params, client));\n    },\n    getManyReference<RecordType extends ra.Record = ra.Record>(\n      resource: string,\n      params: ra.GetManyReferenceParams\n    ): Promise<ra.GetManyReferenceResult<RecordType>> {\n      return run(() =>\n        GetManyReference<RecordType>(resource, params, client)\n      );\n    },\n    update<RecordType extends ra.Record = ra.Record>(\n      resource: string,\n      params: ra.UpdateParams\n    ): Promise<ra.UpdateResult<RecordType>> {\n      return run(() => Update<RecordType>(resource, params, client));\n    },\n    updateMany(\n      resource: string,\n      params: ra.UpdateManyParams\n    ): Promise<ra.UpdateManyResult> {\n      return run(() => UpdateMany(resource, params, client));\n    },\n    create<RecordType extends ra.Record = ra.Record>(\n      resource: string,\n      params: ra.CreateParams\n    ): Promise<ra.CreateResult<RecordType>> {\n      return run(() => Create<RecordType>(resource, params, client));\n    },\n    delete<RecordType extends ra.Record = ra.Record>(\n      resource: string,\n      params: ra.DeleteParams\n    ): Promise<ra.DeleteResult<RecordType>> {\n      return run(() => Delete(resource, params, client));\n    },\n    deleteMany(\n      resource: string,\n      params: ra.DeleteManyParams\n    ): Promise<ra.DeleteManyResult> {\n      return run(() => DeleteMany(resource, params, client));\n    },\n  };\n\n  return newProviderApi;\n}\n\nfunction verifyDataProviderArgs(\n  firebaseConfig: {},\n  options?: RAFirebaseOptions\n) {\n  const hasNoApp = !options || !options.app;\n  const hasNoConfig = !firebaseConfig;\n  if (hasNoConfig && hasNoApp) {\n    throw new Error(\n      'Please pass the Firebase firebaseConfig object or options.app to the FirebaseAuthProvider'\n    );\n  }\n  if (options && options.rootRef) {\n    // Will throw error if rootRef doesn't point to a document\n    getAbsolutePath(options.rootRef, 'test');\n  }\n}\n","// From firebase SDK\n\nimport { logError } from \"./logger\";\n\n// - https://github.com/firebase/firebase-js-sdk/blob/9f109f85ad0d99f6c13e68dcb549a0b852e35a2a/packages/functions/src/api/error.ts\nexport function retrieveStatusTxt(status: number): 'ok' | 'unauthenticated' {\n  // Make sure any successful status is OK.\n  if (status >= 200 && status < 300) {\n    return 'ok';\n  }\n  switch (status) {\n    case 401: // 'unauthenticated'\n    case 403: // 'permission-denied'\n      return 'unauthenticated';\n\n    case 0: // 'internal'\n    case 400: // 'invalid-argument'\n    case 404: // 'not-found'\n    case 409: // 'aborted'\n    case 429: // 'resource-exhausted'\n    case 499: // 'cancelled'\n    case 500: // 'internal'\n    case 501: // 'unimplemented'\n    case 503: // 'unavailable'\n    case 504: // 'deadline-exceeded'\n    default:\n      // ignore\n      return 'ok';\n  }\n}\n\n// From firebase SDK\n// tslint:disable-next-line:max-line-length\n// - https://github.com/firebase/firebase-js-sdk/blob/9f109f85ad0d99f6c13e68dcb549a0b852e35a2a/packages/functions/src/api/error.ts\nexport function retrieveStatusCode(statusTxt: string): number {\n  // Make sure any successful status is OK.\n  const regexResult = /\\[code\\=([\\w-]*)/g.exec(statusTxt);\n  const status = Array.isArray(regexResult) && regexResult[1];\n  if (!status) {\n    logError('unknown StatusCode ', {statusTxt});\n  }\n  switch (status) {\n    case 'unauthenticated':\n      return 401;\n    case 'permission-denied':\n      return 403;\n    case 'internal':\n      return 0;\n    case 'invalid-argument':\n      return 400;\n    case 'not-found':\n      return 404;\n    case 'aborted':\n      return 409;\n    case 'resource-exhausted':\n      return 429;\n    case 'cancelled':\n      return 499;\n    case 'internal':\n      return 500;\n    case 'unimplemented':\n      return 501;\n    case 'unavailable':\n      return 503;\n    case 'deadline-exceeded':\n      return 504;\n    default:\n      return 200;\n  }\n}\n","import { FireClient } from '../database/FireClient';\nimport { FirebaseLazyLoadingClient } from '../lazy-loading/FirebaseLazyLoadingClient';\nimport {\n  filterArray,\n  log,\n  recursivelyMapStorageUrls,\n  sortArray,\n} from '../../misc';\nimport * as ra from '../../misc/react-admin-models';\n\nexport async function GetList<T extends ra.Record>(\n  resourceName: string,\n  params: ra.GetListParams,\n  client: FireClient\n): Promise<ra.GetListResult<T>> {\n  log('GetList', { resourceName, params });\n  const { rm, fireWrapper, options } = client;\n\n  if (options?.lazyLoading?.enabled) {\n    const lazyClient = new FirebaseLazyLoadingClient(\n      options,\n      rm,\n      client\n    );\n    return lazyClient.apiGetList<T>(resourceName, params);\n  }\n\n  const filterSafe = params.filter || {};\n\n  const collectionQuery = filterSafe.collectionQuery;\n  delete filterSafe.collectionQuery;\n\n  const r = await rm.TryGetResource(resourceName, 'REFRESH', collectionQuery);\n  const data = r.list;\n  if (params.sort != null) {\n    const { field, order } = params.sort;\n    if (order === 'ASC') {\n      sortArray(data, field, 'asc');\n    } else {\n      sortArray(data, field, 'desc');\n    }\n  }\n  let softDeleted = data;\n  if (options.softDelete && !Object.keys(filterSafe).includes('deleted')) {\n    softDeleted = data.filter((doc) => !doc.deleted);\n  }\n  const filteredData = filterArray(softDeleted, filterSafe);\n  const pageStart = (params.pagination.page - 1) * params.pagination.perPage;\n  const pageEnd = pageStart + params.pagination.perPage;\n  const dataPage = filteredData.slice(pageStart, pageEnd) as T[];\n  const total = filteredData.length;\n\n  if (options.relativeFilePaths) {\n    const data = await Promise.all(\n      dataPage.map((doc) => recursivelyMapStorageUrls(fireWrapper, doc))\n    );\n    return {\n      data,\n      total,\n    };\n  }\n\n  return {\n    data: dataPage,\n    total,\n  };\n}\n","import { FireClient } from '../database/FireClient';\nimport { log, recursivelyMapStorageUrls } from '../../misc';\nimport * as ra from '../../misc/react-admin-models';\n\nexport async function GetOne<T extends ra.Record>(\n  resourceName: string,\n  params: ra.GetOneParams,\n  client: FireClient\n): Promise<ra.GetOneResult<T>> {\n  log('GetOne', { resourceName, params });\n  const { rm, fireWrapper } = client;\n  try {\n    const id = params.id + '';\n    const dataSingle = await rm.GetSingleDoc(resourceName, id);\n    client.flogger.logDocument(1)();\n    const data = await recursivelyMapStorageUrls(fireWrapper, dataSingle);\n    return { data: data };\n  } catch (error) {\n    throw new Error(\n      'Error getting id: ' + params.id + ' from collection: ' + resourceName\n    );\n  }\n}\n","import { FireClient } from '../database/FireClient';\nimport { log, recursivelyMapStorageUrls } from '../../misc';\nimport * as ra from '../../misc/react-admin-models';\n\nexport async function GetMany<T extends ra.Record>(\n  resourceName: string,\n  params: ra.GetManyParams,\n  client: FireClient\n): Promise<ra.GetManyResult<T>> {\n  const { rm, options, fireWrapper } = client;\n  const r = await rm.TryGetResource(resourceName);\n  log('GetMany', { resourceName, resource: r, params });\n  const ids = params.ids;\n  const matchDocSnaps = await Promise.all(\n    ids.map((id) => r.collection.doc(id + '').get())\n  );\n  client.flogger.logDocument(ids.length)();\n  const matches = matchDocSnaps.map((snap) => {\n    return { ...snap.data(), id: snap.id } as T;\n  });\n  const permittedData = options.softDelete\n    ? matches.filter((row) => !row['deleted'])\n    : matches;\n  if (options.relativeFilePaths) {\n    const data = await Promise.all(\n      permittedData.map((doc) => recursivelyMapStorageUrls(fireWrapper, doc))\n    );\n    return {\n      data,\n    };\n  }\n\n  return {\n    data: permittedData,\n  };\n}\n","import { FireClient } from \"../database/FireClient\";\nimport { filterArray, log, recursivelyMapStorageUrls, sortArray } from \"../../misc\";\nimport * as ra from \"../../misc/react-admin-models\";\n\nexport async function GetManyReference<T extends ra.Record>(\n  resourceName: string,\n  params: ra.GetManyReferenceParams,\n  client: FireClient\n): Promise<ra.GetManyReferenceResult<T>> {\n  const { rm, options, fireWrapper } = client;\n  log(\"GetManyReference\", { resourceName, params });\n  const filterSafe = params.filter || {};\n  const collectionQuery = filterSafe.collectionQuery;\n  const r = await rm.TryGetResource(\n    resourceName,\n    \"REFRESH\",\n    collectionQuery\n  );\n  delete filterSafe.collectionQuery;\n  log(\"apiGetManyReference\", { resourceName, resource: r, params });\n  const data = r.list;\n  const targetField = params.target;\n  const targetValue = params.id;\n  let softDeleted = data;\n  if (options.softDelete) {\n    softDeleted = data.filter(doc => !doc['deleted'])\n  }\n  const filteredData = filterArray(softDeleted, filterSafe);\n  const targetIdFilter: Record<string, ra.Identifier> = {};\n  targetIdFilter[targetField] = targetValue;\n  const permittedData = filterArray(filteredData, targetIdFilter);\n  if (params.sort != null) {\n    const { field, order } = params.sort;\n    if (order === \"ASC\") {\n      sortArray(permittedData, field, \"asc\");\n    } else {\n      sortArray(permittedData, field, \"desc\");\n    }\n  }\n  const pageStart = (params.pagination.page - 1) * params.pagination.perPage;\n  const pageEnd = pageStart + params.pagination.perPage;\n  const dataPage = permittedData.slice(pageStart, pageEnd) as T[];\n  const total = permittedData.length;\n\n  if (options.relativeFilePaths) {\n    const data = await Promise.all(\n      permittedData.map((doc) =>\n        recursivelyMapStorageUrls(fireWrapper, doc)\n      )\n    );\n    return { data, total };\n  }\n\n  return { data: dataPage, total };\n}\n","import { FireClient } from \"../database/FireClient\";\nimport { log } from \"../../misc\";\nimport * as ra from \"../../misc/react-admin-models\";\n\nexport async function Update<T extends ra.Record>(\n  resourceName: string,\n  params: ra.UpdateParams,\n  client: FireClient\n): Promise<ra.UpdateResult<T>> {\n  const { rm } = client;\n  log(\"Update\", { resourceName, params });\n  const id = params.id + \"\";\n  delete params.data.id;\n  const r = await rm.TryGetResource(resourceName);\n  log(\"Update\", { resourceName, resource: r, params });\n  const data = await client.parseDataAndUpload(r, id, params.data);\n  const docObj = { ...data };\n  client.checkRemoveIdField(docObj, id);\n  await client.addUpdatedByFields(docObj);\n  await r.collection.doc(id).update(docObj);\n  return {\n    data: {\n      ...data,\n      id: id,\n    },\n  };\n}\n","import { FireClient } from \"../database/FireClient\";\nimport { log } from \"../../misc\";\nimport * as ra from \"../../misc/react-admin-models\";\n\nexport async function UpdateMany(\n  resourceName: string,\n  params: ra.UpdateManyParams,\n  client: FireClient\n): Promise<ra.UpdateManyResult> {\n  const { rm } = client;\n  log(\"UpdateMany\", { resourceName, params });\n  delete params.data.id;\n  const r = await rm.TryGetResource(resourceName);\n  log(\"UpdateMany\", { resourceName, resource: r, params });\n  const ids = params.ids;\n  const returnData = await Promise.all(\n    ids.map(async id => {\n      const idStr = id+'';\n      const data = await client.parseDataAndUpload(r, idStr, params.data);\n      const docObj = { ...data };\n      client.checkRemoveIdField(docObj, idStr);\n      await client.addUpdatedByFields(docObj);\n      await r.collection\n        .doc(idStr)\n        .update(docObj);\n      return {\n        ...data,\n        id: idStr\n      };\n    })\n  );\n  return {\n    data: returnData\n  };\n}\n","import { FireClient } from \"../database/FireClient\";\nimport { log } from \"../../misc\";\nimport * as ra from \"../../misc/react-admin-models\";\n\nexport async function Create<T extends ra.Record>(\n  resourceName: string,\n  params: ra.CreateParams,\n  client: FireClient\n): Promise<ra.CreateResult<T>> {\n  const { rm, fireWrapper } = client;\n  const r = await rm.TryGetResource(resourceName);\n  log(\"Create\", { resourceName, resource: r, params });\n  const hasOverridenDocId = params.data && params.data.id;\n  log(\"Create\", { hasOverridenDocId });\n  if (hasOverridenDocId) {\n    const overridenId = params.data.id;\n    const exists = (await r.collection.doc(overridenId).get()).exists;\n    if (exists) {\n      throw new Error(\n        `the id:\"${overridenId}\" already exists, please use a unique string if overriding the 'id' field`\n      );\n    }\n    const data = await client.parseDataAndUpload(r, overridenId, params.data);\n    if (!overridenId) {\n      throw new Error(\"id must be a valid string\");\n    }\n    const docObj = { ...data };\n    client.checkRemoveIdField(docObj, overridenId);\n    await client.addCreatedByFields(docObj);\n    await client.addUpdatedByFields(docObj);\n    log(\"Create\", { docObj });\n    await r.collection.doc(overridenId).set(docObj, { merge: false });\n    return {\n      data: {\n        ...data,\n        id: overridenId,\n      },\n    };\n  }\n  const newId = fireWrapper.dbMakeNewId();\n  const data = await client.parseDataAndUpload(r, newId, params.data);\n  const docObj = { ...data };\n  client.checkRemoveIdField(docObj, newId);\n  await client.addCreatedByFields(docObj);\n  await client.addUpdatedByFields(docObj);\n  await r.collection.doc(newId).set(docObj, { merge: false });\n  return {\n    data: {\n      ...data,\n      id: newId,\n    },\n  };\n}\n","import { FireClient } from \"../database/FireClient\";\nimport { log } from \"../../misc\";\nimport * as ra from \"../../misc/react-admin-models\";\nimport { DeleteSoft } from \"./Delete.Soft\";\n\nexport async function Delete<T extends ra.Record>(\n  resourceName: string,\n  params: ra.DeleteParams,\n  client: FireClient\n): Promise<ra.DeleteResult<T>> {\n  const { rm, options } = client;\n  if (options.softDelete) {\n    return DeleteSoft(resourceName, params, client);\n  }\n  const r = await rm.TryGetResource(resourceName);\n  log(\"apiDelete\", { resourceName, resource: r, params });\n  try {\n    const id = params.id + \"\";\n    await r.collection.doc(id).delete();\n  } catch (error) {\n    throw new Error(error as any);\n  }\n  return {\n    data: params.previousData as T,\n  };\n}\n","import { FireClient } from \"../database/FireClient\";\nimport { log, logError } from \"../../misc\";\nimport * as ra from \"../../misc/react-admin-models\";\n\nexport async function DeleteSoft<T extends ra.Record>(\n  resourceName: string,\n  params: ra.DeleteParams,\n  client: FireClient\n): Promise<ra.DeleteResult<T>> {\n  const { rm } = client;\n  const id = params.id + \"\";\n  const r = await rm.TryGetResource(resourceName);\n  log(\"DeleteSoft\", { resourceName, resource: r, params });\n  const docObj = { deleted: true };\n  await client.addUpdatedByFields(docObj);\n  r.collection\n    .doc(id)\n    .update(docObj)\n    .catch((error) => {\n      logError(\"DeleteSoft error\", { error });\n    });\n  return {\n    data: params.previousData as T,\n  };\n}\n","import { FireClient } from \"../database/FireClient\";\nimport { log } from \"../../misc\";\nimport * as ra from \"../../misc/react-admin-models\";\nimport { DeleteManySoft } from \"./DeleteMany.Soft\";\n\nexport async function DeleteMany(\n  resourceName: string,\n  params: ra.DeleteManyParams,\n  client: FireClient\n): Promise<ra.DeleteManyResult> {\n  const { options, rm, fireWrapper } = client;\n  if (options.softDelete) {\n    return DeleteManySoft(resourceName, params, client);\n  }\n  const r = await rm.TryGetResource(resourceName);\n  log(\"DeleteMany\", { resourceName, resource: r, params });\n  const returnData: ra.Identifier[] = [];\n  const batch = fireWrapper.dbCreateBatch();\n  for (const id of params.ids) {\n    const idStr = id + '';\n    const docToDelete = r.collection.doc(idStr);\n    batch.delete(docToDelete);\n    returnData.push(id);\n  }\n  try {\n    await batch.commit();\n  } catch (error) {\n    throw new Error(error as any)\n  }\n  return { data: returnData };\n}\n","import { FireClient } from \"../database/FireClient\";\nimport { log, logError } from \"../../misc\";\nimport * as ra from \"../../misc/react-admin-models\";\n\nexport async function DeleteManySoft(\n  resourceName: string,\n  params: ra.DeleteManyParams,\n  client: FireClient\n): Promise<ra.DeleteManyResult> {\n  const { rm } = client;\n  const r = await rm.TryGetResource(resourceName);\n  log(\"DeleteManySoft\", { resourceName, resource: r, params });\n  const ids = params.ids;\n  const returnData = await Promise.all(\n    ids.map(async (id) => {\n      const idStr = id + \"\";\n      const docObj = { deleted: true };\n      await client.addUpdatedByFields(docObj);\n      r.collection\n        .doc(idStr)\n        .update(docObj)\n        .catch((error) => {\n          logError(\"apiSoftDeleteMany error\", { error });\n        });\n      return idStr;\n    })\n  );\n  return {\n    data: returnData,\n  };\n}\n","import { messageTypes } from './../misc/messageTypes';\nimport { log, retrieveStatusTxt, logWarn, logger } from '../misc';\nimport { RAFirebaseOptions } from './options';\nimport { FirebaseWrapper } from './database/firebase/FirebaseWrapper';\nimport {\n  AuthProvider as RaAuthProvider,\n  UserIdentity,\n} from '../misc/react-admin-models';\nimport { IFirebaseWrapper } from './database';\nimport { FireUser } from 'misc/firebase-models';\n\nclass AuthClient {\n  private fireWrapper: IFirebaseWrapper;\n\n  constructor(firebaseConfig: {}, optionsInput?: RAFirebaseOptions) {\n    const options = optionsInput || {};\n    log('Auth Client: initializing...', { firebaseConfig, options });\n    this.fireWrapper = new FirebaseWrapper(options, firebaseConfig);\n    options.persistence && this.setPersistence(options.persistence);\n  }\n\n  setPersistence(persistenceInput: 'session' | 'local' | 'none') {\n    return this.fireWrapper.authSetPersistence(persistenceInput);\n  }\n\n  public async HandleAuthLogin(params: { username: string; password: string }) {\n    const { username, password } = params;\n\n    if (username && password) {\n      try {\n        const user = await this.fireWrapper.authSigninEmailPassword(\n          username,\n          password\n        );\n        log('HandleAuthLogin: user sucessfully logged in', { user });\n        return user;\n      } catch (e) {\n        log('HandleAuthLogin: invalid credentials', { params });\n        throw new Error('Login error: invalid credentials');\n      }\n    } else {\n      return this.getUserLogin();\n    }\n  }\n\n  public HandleAuthLogout() {\n    return this.fireWrapper.authSignOut();\n  }\n\n  public HandleAuthError(errorHttp: messageTypes.HttpErrorType) {\n    log('HandleAuthLogin: invalid credentials', { errorHttp });\n    const status = !!errorHttp && errorHttp.status;\n    const statusTxt = retrieveStatusTxt(status);\n    if (statusTxt === 'ok') {\n      log('API is actually authenticated');\n      return Promise.resolve();\n    }\n    logWarn('Recieved authentication error from API');\n    return Promise.reject();\n  }\n\n  public async HandleAuthCheck(): Promise<any> {\n    return this.getUserLogin();\n  }\n\n  public getUserLogin(): Promise<FireUser> {\n    return this.fireWrapper.authGetUserLoggedIn();\n  }\n\n  public async HandleGetPermissions() {\n    try {\n      const user = await this.getUserLogin();\n      // @ts-ignore\n      const token = await user.getIdTokenResult();\n\n      return token.claims;\n    } catch (e) {\n      log('HandleGetPermission: no user is logged in or tokenResult error', {\n        e,\n      });\n      return null;\n    }\n  }\n\n  public async HandleGetIdentity(): Promise<UserIdentity> {\n    try {\n      const { uid, displayName, photoURL } = await this.getUserLogin();\n      const identity: UserIdentity = {\n        id: uid,\n        fullName: `${displayName ?? ''}`,\n        avatar: `${photoURL ?? ''}`,\n      };\n      return identity;\n    } catch (e) {\n      log('HandleGetIdentity: no user is logged in', {\n        e,\n      });\n      return null as any;\n    }\n  }\n\n  public async HandleGetJWTAuthTime() {\n    try {\n      const user = await this.getUserLogin();\n      // @ts-ignore\n      const token = await user.getIdTokenResult();\n\n      return token.authTime;\n    } catch (e) {\n      log('HandleGetJWTAuthTime: no user is logged in or tokenResult error', {\n        e,\n      });\n      return null;\n    }\n  }\n\n  public async HandleGetJWTExpirationTime() {\n    try {\n      const user = await this.getUserLogin();\n      // @ts-ignore\n      const token = await user.getIdTokenResult();\n\n      return token.expirationTime;\n    } catch (e) {\n      log(\n        'HandleGetJWTExpirationTime: no user is logged in or tokenResult error',\n        {\n          e,\n        }\n      );\n      return null;\n    }\n  }\n\n  public async HandleGetJWTSignInProvider() {\n    try {\n      const user = await this.getUserLogin();\n      // @ts-ignore\n      const token = await user.getIdTokenResult();\n\n      return token.signInProvider;\n    } catch (e) {\n      log(\n        'HandleGetJWTSignInProvider: no user is logged in or tokenResult error',\n        {\n          e,\n        }\n      );\n      return null;\n    }\n  }\n\n  public async HandleGetJWTIssuedAtTime() {\n    try {\n      const user = await this.getUserLogin();\n      // @ts-ignore\n      const token = await user.getIdTokenResult();\n\n      return token.issuedAtTime;\n    } catch (e) {\n      log(\n        'HandleGetJWTIssuedAtTime: no user is logged in or tokenResult error',\n        {\n          e,\n        }\n      );\n      return null;\n    }\n  }\n\n  public async HandleGetJWTToken() {\n    try {\n      const user = await this.getUserLogin();\n      // @ts-ignore\n      const token = await user.getIdTokenResult();\n\n      return token.token;\n    } catch (e) {\n      log(\n        'HandleGetJWTIssuedAtTime: no user is logged in or tokenResult error',\n        {\n          e,\n        }\n      );\n      return null;\n    }\n  }\n}\n\nexport function AuthProvider(\n  firebaseConfig: {},\n  options: RAFirebaseOptions\n): RaAuthProvider {\n  VerifyAuthProviderArgs(firebaseConfig, options);\n  logger.SetEnabled(!!options?.logging);\n  const auth = new AuthClient(firebaseConfig, options);\n\n  const provider: RaAuthProvider = {\n    // React Admin Interface\n    login: (params) => auth.HandleAuthLogin(params),\n    logout: () => auth.HandleAuthLogout(),\n    checkAuth: () => auth.HandleAuthCheck(),\n    checkError: (error) => auth.HandleAuthError(error),\n    getPermissions: () => auth.HandleGetPermissions(),\n    getIdentity: () => auth.HandleGetIdentity(),\n    // Custom Functions\n    getAuthUser: () => auth.getUserLogin(),\n    getJWTAuthTime: () => auth.HandleGetJWTAuthTime(),\n    getJWTExpirationTime: () => auth.HandleGetJWTExpirationTime(),\n    getJWTSignInProvider: () => auth.HandleGetJWTSignInProvider(),\n    getJWTClaims: () => auth.HandleGetPermissions(),\n    getJWTToken: () => auth.HandleGetJWTToken(),\n  };\n  return provider;\n}\n\nfunction VerifyAuthProviderArgs(\n  firebaseConfig: {},\n  options: RAFirebaseOptions\n) {\n  const hasNoApp = !options || !options.app;\n  const hasNoConfig = !firebaseConfig;\n  if (hasNoConfig && hasNoApp) {\n    throw new Error(\n      'Please pass the Firebase firebaseConfig object or options.app to the FirebaseAuthProvider'\n    );\n  }\n}\n"],"names":["parseAllDatesDoc","obj","Object","keys","map","key","recusivelyCheckObjectValue","input","toDate","Array","isArray","value","parseFireStoreDocument","doc","data","id","sortArray","field","dir","sort","a","b","rawA","get","rawB","isAsc","Number","isFinite","basicSort","toLowerCase","Date","aValue","bValue","filterArray","searchFields","isEmpty","searchObjs","fieldName","getSubObjects","searchField","searchValue","tree","leaves","recursivelyWalk","path","hasOwnProperty","objVal","currentPath","push","objectFlatten","getFieldReferences","filter","row","reduce","acc","cur","searchThis","toString","includes","doesRowMatch","LogNoOp","args","LoggerBase","constructor","title","cacheEnabledKey","this","isEnabled","localStorage","getItem","SetEnabled","setItem","removeItem","log","console","bind","warn","error","logger","logError","logWarn","KEY_SINGLE","recursivelyMapStorageUrls","async","fireWrapper","fieldValue","isObject","src","startsWith","getStorageDownloadUrl","i","length","getAbsolutePath","rootRef","relativePath","Error","rootRefValue","withSlashes","join","split","slice","joinPaths","FirebaseWrapper","inputOptions","firebaseConfig","optionsSafe","options","app","window","firebase","apps","_firebase$apps","initializeApp","ObtainFirebaseApp","firestore","dbGetCollection","absolutePath","collection","dbCreateBatch","batch","dbMakeNewId","OnUserLogout","callBack","auth","onAuthStateChanged","user","isLoggedOut","putFile","storagePath","rawFile","task","storage","ref","put","taskResult","Promise","res","rej","then","catch","downloadUrl","t","getDownloadURL","url","[object Object]","fieldSrc","serverTimestamp","FieldValue","persistenceInput","persistenceResolved","Auth","Persistence","LOCAL","NONE","SESSION","setPersistence","email","password","signInWithEmailAndPassword","signOut","resolve","reject","currentUser","unsubscribe","authGetUserLoggedIn","GetApp","db","ResourceManager","flogger","resources","resourceName","refresh","collectionQuery","RefreshResource","TryGetResourcePromise","GetResource","resource","initPath","_this$options","lazyLoading","_this$options$lazyLoa","enabled","query","applyQuery","newDocs","list","docs","logDocument","collectionPath","docId","docSnap","exists","result","hasBeenInited","pathAbsolute","allResources","associateUsersById","getCurrentUserId","getCurrentUserEmail","uid","collRef","FireClient","rm","checkRemoveIdField","dontAddIdFieldToDoc","r","docPath","uploads","recusivelyParseObjectValue","fieldPath","index","fieldDotsPath","fieldSlashesPath","parseDocGetAllUploads","all","u","link","_this","uploadAndGetLink","useFileNamesInStorage","set","disableMeta","currentUserIdentifier","getUserIdentifier","createAtSelector","renameMetaFields","created_at","casing","metaFieldCasing","GetSelectorsCreateAt","createBySelector","created_by","GetSelectorsCreateBy","AddCreatedByFields","updateAtSelector","updated_at","GetSelectorsUpdateAt","updateBySelector","updated_by","GetSelectorsUpdateBy","AddUpdatedByFields","useFileName","name","saveFile","relativeFilePaths","storageError","getQueryCursor","params","btoa","JSON","stringify","defaultParamsToQueryOptions","filters","pagination","paramsToQuery","filtersStepQuery","entries","opStr","where","sortStepQuery","order","parsedOrder","toLocaleLowerCase","orderBy","sortToQuery","page","perPage","limit","queryCursor","queryBase","lastQueryCursor","currentPage","currentPageParams","newQuery","startAt","snapshots","docsLength","findLastQueryCursor","startAfter","paginationToQuery","getFullParamsForQuery","reactAdminParams","softdeleteEnabled","deleted","FirebaseLazyLoadingClient","client","tryGetResource","softDelete","resultsCount","message","total","d","nextPageCursor","allCursorsKey","localCursorKeys","newCursors","parse","concat","setQueryCursor","getNextPageParams","checkIfOnLastPage","parsedData","filterWithTarget","target","_this2","empty","clearQueryCursors","forEach","cursor","DataProvider","optionsInput","verifyDataProviderArgs","ResetCount","shouldReset","docCount","_options$lazyLoading","count","incrementBy","currentCountRaw","incremented","parseInt","incrementRead","MakeFirestoreLogger","logging","firestoreCostsLogger","_options$firestoreCos","_options$firestoreCos2","persistCount","run","cb","errorMsg","code","statusTxt","regexResult","exec","status","retrieveStatusCode","errorObj","json","getList","apiGetList","filterSafe","TryGetResource","softDeleted","filteredData","pageStart","dataPage","GetList","getOne","dataSingle","GetSingleDoc","GetOne","getMany","ids","matchDocSnaps","matches","snap","permittedData","GetMany","getManyReference","targetField","targetValue","targetIdFilter","GetManyReference","update","parseDataAndUpload","docObj","addUpdatedByFields","Update","updateMany","idStr","UpdateMany","create","hasOverridenDocId","overridenId","addCreatedByFields","merge","newId","Create","delete","previousData","DeleteSoft","Delete","deleteMany","DeleteManySoft","returnData","docToDelete","commit","DeleteMany","AuthClient","persistence","authSetPersistence","username","getUserLogin","authSigninEmailPassword","e","HandleAuthLogout","authSignOut","HandleAuthError","errorHttp","retrieveStatusTxt","getIdTokenResult","claims","displayName","photoURL","fullName","avatar","authTime","expirationTime","signInProvider","issuedAtTime","token","AuthProvider","VerifyAuthProviderArgs","login","HandleAuthLogin","logout","checkAuth","HandleAuthCheck","checkError","getPermissions","HandleGetPermissions","getIdentity","HandleGetIdentity","getAuthUser","getJWTAuthTime","HandleGetJWTAuthTime","getJWTExpirationTime","HandleGetJWTExpirationTime","getJWTSignInProvider","HandleGetJWTSignInProvider","getJWTClaims","getJWTToken","HandleGetJWTToken"],"mappings":"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"}