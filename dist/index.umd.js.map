{"version":3,"file":"index.umd.js","sources":["../src/misc/timestamp-parser.ts","../src/misc/document-parser.ts","../src/misc/arrayHelpers.ts","../src/misc/objectFlatten.ts","../src/misc/logger/logger-base.ts","../src/misc/logger/logger.ts","../src/misc/logger/firestore-logger.ts","../src/misc/file-parser.ts","../src/misc/pathHelper.ts","../src/providers/database/firebase/FirebaseWrapper.ts","../src/providers/database/ResourceManager.ts","../src/providers/database/FireClient.ts","../src/misc/metadata-parser.ts","../src/providers/lazy-loading/queryCursors.ts","../src/providers/lazy-loading/paramsToQuery.ts","../src/providers/lazy-loading/FirebaseLazyLoadingClient.ts","../src/providers/AuthProvider.ts","../src/misc/status-code-translator.ts","../src/providers/DataProvider.ts","../src/providers/queries/GetList.ts","../src/providers/queries/GetOne.ts","../src/providers/queries/GetMany.ts","../src/providers/queries/GetManyReference.ts","../src/providers/commands/Update.ts","../src/providers/commands/UpdateMany.ts","../src/providers/commands/Create.ts","../src/providers/commands/Delete.ts","../src/providers/commands/Delete.Soft.ts","../src/providers/commands/DeleteMany.ts","../src/providers/commands/DeleteMany.Soft.ts"],"sourcesContent":["export function parseAllDatesDoc(obj: any) {\n  const isObject = !!obj && typeof obj === 'object';\n  if (!isObject) {\n    return;\n  }\n  Object.keys(obj).map(key => {\n    const value = obj[key];\n    obj[key] = recusivelyCheckObjectValue(value);\n  });\n}\n\nexport function recusivelyCheckObjectValue(input: any): any {\n  const isFalsey = !input;\n  if (isFalsey) {\n    return input;\n  }\n  const isPrimitive = typeof input !== 'object';\n  if (isPrimitive) {\n    return input;\n  }\n  const isTimestamp = !!input.toDate && typeof input.toDate === 'function';\n  if (isTimestamp) {\n    return input.toDate();\n  }\n  const isArray = Array.isArray(input);\n  if (isArray) {\n    return (input as []).map(value => recusivelyCheckObjectValue(value));\n  }\n  const isObject = typeof input === 'object';\n  if (isObject) {\n    Object.keys(input).map(key => {\n      const value = input[key];\n      input[key] = recusivelyCheckObjectValue(value);\n    });\n    return input;\n  }\n}\n","import { FireStoreDocumentSnapshot, FireStoreQueryDocumentSnapshot } from './firebase-models';\nimport { parseAllDatesDoc } from './timestamp-parser';\n\nexport const parseFireStoreDocument = (doc: FireStoreQueryDocumentSnapshot) => {\n  const data = doc.data();\n  parseAllDatesDoc(data);\n  // React Admin requires an id field on every document,\n  // So we can just using the firestore document id\n  return { id: doc.id, ...data };\n};\n","import { get, isEmpty } from 'lodash';\nimport { getFieldReferences, SearchObj } from './objectFlatten';\n\nexport function sortArray(\n  data: Array<{}>,\n  field: string,\n  dir: 'asc' | 'desc'\n): void {\n  data.sort((a: {}, b: {}) => {\n    const rawA = get(a, field);\n    const rawB = get(b, field);\n    const isAsc = dir === \"asc\";\n\n    const isNumberField = Number.isFinite(rawA) && Number.isFinite(rawB);\n    if (isNumberField) {\n      return basicSort(rawA, rawB, isAsc);\n    }\n    const isStringField = typeof rawA === 'string' && typeof rawB === 'string';\n    if (isStringField) {\n      const aParsed = rawA.toLowerCase();\n      const bParsed = rawB.toLowerCase();\n      return basicSort(aParsed, bParsed, isAsc);\n    }\n    const isDateField = rawA instanceof Date && rawB instanceof Date;\n    if (isDateField) {\n      return basicSort(rawA, rawB, isAsc);\n    }\n    return basicSort(!!rawA, !!rawB, isAsc);\n  });\n}\n\nfunction basicSort(aValue: any, bValue: any, isAsc: boolean) {\n  if (aValue > bValue) {\n    return isAsc ? 1 : -1;\n  }\n  if (aValue < bValue) {\n    return isAsc ? -1 : 1;\n  }\n  return 0;\n}\n\nexport function filterArray(\n  data: Array<{}>,\n  searchFields?: { [field: string]: string | number | boolean | null }\n): Array<{}> {\n  if (!searchFields || isEmpty(searchFields)) {\n    return data;\n  }\n  const searchObjs: SearchObj[] = [];\n  Object.keys(searchFields).map((fieldName) => {\n    const fieldValue = searchFields[fieldName];\n    const getSubObjects = getFieldReferences(fieldName, fieldValue);\n    searchObjs.push(...getSubObjects);\n  });\n  const filtered = data.filter((row) =>\n    searchObjs.reduce((acc, cur) => {\n      const res = doesRowMatch(row, cur.searchField, cur.searchValue);\n      return res && acc;\n    }, true as boolean)\n  );\n  return filtered;\n}\n\nexport function doesRowMatch(\n  row: {},\n  searchField: string,\n  searchValue: any\n): boolean {\n  const searchThis = get(row, searchField);\n  const bothAreFalsey = !searchThis && !searchValue;\n  if (bothAreFalsey) {\n    return true;\n  }\n  const nothingToSearch = !searchThis;\n  if (nothingToSearch) {\n    return false;\n  }\n  const isStringSearch = typeof searchValue === 'string';\n  if (isStringSearch) {\n    return searchThis\n      .toString()\n      .toLowerCase()\n      .includes(searchValue.toLowerCase());\n  }\n  const isBooleanOrNumber =\n    typeof searchValue === 'boolean' || typeof searchValue === 'number';\n  if (isBooleanOrNumber) {\n    return searchThis === searchValue;\n  }\n  const isArraySearch = Array.isArray(searchValue);\n  if (isArraySearch) {\n    return searchValue.includes(searchThis);\n  }\n  return false;\n}\n","type SearchValues = {} | number | string | boolean | null ;\ntype SearchValue = SearchValues | SearchValue[];\n\nexport interface SearchObj {\n  searchField: string;\n  searchValue: SearchValue;\n}\nexport function getFieldReferences(\n  fieldName: string,\n  value: {} | SearchValue\n): SearchObj[] {\n  const isFalsy = !value;\n  const isSimple = isFalsy ||\n    typeof value === 'string' ||\n    typeof value === 'number' ||\n    typeof value === 'boolean';\n\n  if (isSimple) {\n    return [\n      {\n        searchField: fieldName,\n        searchValue: value as SearchValue,\n      },\n    ];\n  }\n  const tree = {} as Record<string, SearchValue>;\n  tree[fieldName] = value;\n  return objectFlatten(tree);\n}\n\nexport function objectFlatten(tree: {}): SearchObj[] {\n  var leaves: SearchObj[] = [];\n  var recursivelyWalk = function (obj: any, path: string | null) {\n    path = path || \"\";\n    for (var key in obj) {\n      if (obj.hasOwnProperty(key)) {\n        const objVal = obj && obj[key];\n        const currentPath = !!path ? path + \".\" + key : key;\n        const isWalkable =\n          typeof objVal === 'object' || objVal instanceof Array;\n        if (isWalkable) {\n          recursivelyWalk(objVal, currentPath);\n        } else {\n          leaves.push({ searchField: currentPath, searchValue: objVal });\n        }\n      }\n    }\n  };\n  recursivelyWalk(tree, null);\n  return leaves;\n}\n","type LogFn = (...args: any) => void;\n\nexport const LogNoOp: LogFn = (...args: any) => null;\n\nexport class LoggerBase {\n  constructor(private title: string, private cacheEnabledKey: string) {}\n\n  private isEnabled() {\n    return !!localStorage.getItem(this.cacheEnabledKey);\n  }\n\n  SetEnabled(isEnabled: boolean) {\n    if (isEnabled) {\n      localStorage.setItem(this.cacheEnabledKey, 'true');\n    } else {\n      localStorage.removeItem(this.cacheEnabledKey);\n    }\n  }\n\n  public get log() {\n    if (!this.isEnabled()) {\n      return LogNoOp;\n    }\n    const boundLogFn: (...args: any) => void = console.log.bind(\n      console,\n      this.title\n    );\n    return boundLogFn;\n  }\n\n  public get warn() {\n    if (!this.isEnabled()) {\n      return LogNoOp;\n    }\n    const boundLogFn: (...args: any) => void = console.warn.bind(\n      console,\n      this.title\n    );\n    return boundLogFn;\n  }\n\n  public get error() {\n    if (!this.isEnabled()) {\n      return LogNoOp;\n    }\n    const boundLogFn: (...args: any) => void = console.error.bind(\n      console,\n      this.title\n    );\n    return boundLogFn;\n  }\n}\n","import { LoggerBase } from './logger-base';\n\nconst LOGGER_ENABLEDKEY = 'LOGGING_ENABLED';\nexport const logger = new LoggerBase('ðŸ”¥raf:', LOGGER_ENABLEDKEY);\n\nexport const log = logger.log;\nexport const logError = logger.error;\nexport const logWarn = logger.warn;\n","import { RAFirebaseOptions } from 'providers/options';\nimport { LogNoOp, LoggerBase } from './logger-base';\n\nconst LOGGER_ENABLEDKEY = 'LOGGING_FIRESTORE_COSTS_ENABLED';\nconst logger = new LoggerBase('ðŸ’¸firestore-costs:', LOGGER_ENABLEDKEY);\n\nconst KEY_SINGLE = 'firecosts-single-reads';\n\nexport interface IFirestoreLogger {\n  logDocument: (count: number) => Function;\n  SetEnabled: (isEnabled: boolean) => void;\n  ResetCount: (shouldReset: boolean) => void;\n}\n\nexport function MakeFirestoreLogger(\n  options: RAFirebaseOptions\n): IFirestoreLogger {\n  function notEnabled() {\n    return !options?.lazyLoading?.enabled;\n  }\n\n  function incrementRead(incrementBy = 1) {\n    const currentCountRaw = localStorage.getItem(KEY_SINGLE) || '';\n    const currentCount = parseInt(currentCountRaw) || 0;\n    const incremented = currentCount + incrementBy;\n    localStorage.setItem(KEY_SINGLE, incremented + '');\n    return incremented;\n  }\n  function clearCache() {\n    localStorage.removeItem(KEY_SINGLE);\n  }\n  return {\n    SetEnabled(isEnabled: boolean) {\n      logger.SetEnabled(isEnabled);\n    },\n    ResetCount(shouldReset: boolean) {\n      shouldReset && clearCache()\n    },\n    logDocument(docCount: number) {\n      if (notEnabled()) {\n        return LogNoOp;\n      }\n      const count = incrementRead(docCount);\n      const suffix = `+${docCount} (session total=${count} documents read)`;\n      const boundLogFn: (...args: any) => void = logger.log.bind(\n        console,\n        suffix\n      );\n      return boundLogFn;\n    },\n  };\n}\n","import { logError } from './logger';\nimport { IFirebaseWrapper } from '../providers/database/firebase/IFirebaseWrapper';\n\ninterface ParsedUpload {\n  fieldDotsPath: string;\n  fieldSlashesPath: string;\n  rawFile: File | any;\n}\n\nexport function parseDocGetAllUploads(obj: any): ParsedUpload[] {\n  const isObject = !!obj && typeof obj === \"object\";\n  if (!isObject) {\n    return [];\n  }\n  const uploads: ParsedUpload[] = [];\n  Object.keys(obj).map((key) => {\n    const value = obj[key];\n    recusivelyParseObjectValue(value, key, uploads);\n  });\n  return uploads;\n}\n\nexport function recusivelyParseObjectValue(\n  input: any,\n  fieldPath: string,\n  uploads: ParsedUpload[]\n): any {\n  const isFalsey = !input;\n  if (isFalsey) {\n    return input;\n  }\n  const isPrimitive = typeof input !== 'object';\n  if (isPrimitive) {\n    return input;\n  }\n  const isTimestamp = !!input.toDate && typeof input.toDate === 'function';\n  if (isTimestamp) {\n    return input.toDate();\n  }\n  const isArray = Array.isArray(input);\n  if (isArray) {\n    return (input as []).map((value, index) =>\n      recusivelyParseObjectValue(value, `${fieldPath}.${index}`, uploads)\n    );\n  }\n  const isObject = typeof input === 'object';\n  if (!isObject) {\n    return;\n  }\n  const isFileField = !!input && input.hasOwnProperty('rawFile');\n  if (isFileField) {\n    uploads.push({\n      fieldDotsPath: fieldPath,\n      fieldSlashesPath: fieldPath.split('.').join('/'),\n      rawFile: input.rawFile\n    });\n    delete input.rawFile;\n    return;\n  }\n  Object.keys(input).map((key) => {\n    const value = input[key];\n    recusivelyParseObjectValue(value, `${fieldPath}.${key}`, uploads);\n  });\n  return input;\n}\n\nexport const recursivelyMapStorageUrls = async (\n  fireWrapper: IFirebaseWrapper,\n  fieldValue: any\n): Promise<any> => {\n  const isArray = Array.isArray(fieldValue);\n  const isObject = !isArray && typeof fieldValue === \"object\";\n  const isFileField = isObject && !!fieldValue && fieldValue.hasOwnProperty(\"src\");\n  if (isFileField) {\n    const isAlreadyUploaded = fieldValue.src.startsWith('https://');\n    if (isAlreadyUploaded) {\n      return fieldValue;\n    }\n    try {\n      const src = await fireWrapper.getStorageDownloadUrl(fieldValue.src);\n      return {\n        ...fieldValue,\n        src\n      };\n    } catch (error) {\n      logError(`Error when getting download URL`, {\n        error,\n        fieldValue,\n      });\n      return fieldValue;\n    }\n  } else if (isObject) {\n    for (let key in fieldValue) {\n      if (fieldValue.hasOwnProperty(key)) {\n        const value = fieldValue[key];\n        fieldValue[key] = await recursivelyMapStorageUrls(fireWrapper, value);\n      }\n    }\n\n    return fieldValue;\n  } else if (isArray) {\n    for (let i = 0; i < fieldValue.length; i++) {\n      fieldValue[i] = await recursivelyMapStorageUrls(fireWrapper, fieldValue[i])\n    }\n\n    return fieldValue;\n  }\n\n  return fieldValue;\n};\n","import path from \"path-browserify\";\n\nexport function getAbsolutePath(\n  rootRef: undefined | string | (() => string),\n  relativePath: string | null\n): string {\n  if (!rootRef) {\n    return relativePath+'';\n  }\n  if (!relativePath) {\n    throw new Error(\n      \"Resource name must be a string of length greater than 0 characters\"\n    );\n  }\n  const rootRefValue = typeof rootRef === \"string\" ? rootRef : rootRef();\n  const withSlashes = path.join(\"/\", rootRefValue, \"/\", relativePath, \"/\");\n  const slashCount = withSlashes.split(\"/\").length - 1;\n  if (slashCount % 2) {\n    throw new Error(`The rootRef path must point to a \"document\"\n    not a \"collection\"e.g. /collection/document/ or\n    /collection/document/collection/document/`);\n  }\n  return withSlashes.slice(1, -1);\n}\n\nexport function joinPaths(...args: string[]) {\n  return path.join(...args);\n}\n","import {\n  IFirebaseWrapper,\n} from './IFirebaseWrapper';\n\nimport firebase from 'firebase/compat/app';\nimport 'firebase/compat/auth';\nimport 'firebase/compat/firestore';\nimport 'firebase/compat/storage';\n\nimport { log } from 'misc';\nimport { RAFirebaseOptions } from 'providers/options';\nimport {\n  FireApp,\n  FireAuth,\n  FireAuthUserCredentials,\n  FireStorage,\n  FireStoragePutFileResult,\n  FireStore,\n  FireStoreBatch,\n  FireStoreCollectionRef,\n  FireUploadTaskSnapshot,\n  FireUser\n} from 'misc/firebase-models';\n\nexport class FirebaseWrapper implements IFirebaseWrapper {\n  private firestore: FireStore;\n  private app: FireApp;\n  public options: RAFirebaseOptions;\n\n  constructor(\n    inputOptions: RAFirebaseOptions | undefined,\n    firebaseConfig: {},\n  ) { \n    const optionsSafe = inputOptions || {};\n    this.options = optionsSafe;\n    this.app = (window as any)['_app'] = ObtainFirebaseApp(firebaseConfig, optionsSafe);\n    this.firestore = this.app.firestore();\n  }\n  dbGetCollection(absolutePath: string): FireStoreCollectionRef {\n    return this.firestore.collection(absolutePath);\n  }\n  dbCreateBatch(): FireStoreBatch {\n    return this.firestore.batch();\n  }\n  dbMakeNewId(): string {\n    return this.firestore.collection(\"collections\").doc().id\n  }\n\n  public OnUserLogout(callBack: (u: FireUser | null) => any) {\n    this.app.auth().onAuthStateChanged((user) => {\n      const isLoggedOut = !user;\n      log('FirebaseWrapper.OnUserLogout', { user, isLoggedOut });\n      if (isLoggedOut) {\n        callBack(user);\n      }\n    });\n  }\n  putFile(storagePath: string, rawFile: any): FireStoragePutFileResult {\n    const task = this.app.storage().ref(storagePath).put(rawFile);\n    const taskResult = new Promise<FireUploadTaskSnapshot>(\n      (res, rej) => task.then(res).catch(rej)\n    );\n    const downloadUrl = taskResult.then(t => t.ref.getDownloadURL()).then(url => url as string)\n    return {\n      task,\n      taskResult,\n      downloadUrl,\n    }\n  }\n  async getStorageDownloadUrl(fieldSrc: string): Promise<string> {\n    return this.app.storage().ref(fieldSrc).getDownloadURL();\n  }\n  public serverTimestamp() {\n    // This line doesn't work for some reason, might be firebase sdk.\n    return firebase.firestore.FieldValue.serverTimestamp();\n  }\n  async authSetPersistence(persistenceInput: 'session' | 'local' | 'none') {\n    let persistenceResolved: string;\n    switch (persistenceInput) {\n      case 'local':\n        persistenceResolved = firebase.auth.Auth.Persistence.LOCAL;\n        break;\n      case 'none':\n        persistenceResolved = firebase.auth.Auth.Persistence.NONE;\n        break;\n      case 'session':\n      default:\n        persistenceResolved = firebase.auth.Auth.Persistence.SESSION;\n        break;\n    }\n    log('setPersistence', { persistenceInput, persistenceResolved });\n    return this.app.auth()\n      .setPersistence(persistenceResolved)\n      .catch((error) => console.error(error));\n  }\n  async authSigninEmailPassword(email: string, password: string): Promise<FireAuthUserCredentials> {\n    const user = await this.app.auth().signInWithEmailAndPassword(\n      email,\n      password\n    );\n    return user;\n  }\n  async authSignOut(): Promise<void> {\n    return this.app.auth().signOut();\n  }\n  async authGetUserLoggedIn(): Promise<FireUser> {\n    return new Promise((resolve, reject) => {\n      const auth = this.app.auth();\n      if (auth.currentUser) return resolve(auth.currentUser);\n      const unsubscribe = this.app.auth().onAuthStateChanged((user) => {\n        unsubscribe();\n        if (user) {\n          resolve(user);\n        } else {\n          reject();\n        }\n      });\n    });\n  }\n  public async GetUserLogin(): Promise<FireUser> {\n    return this.authGetUserLoggedIn();\n  }\n\n  /** @deprecated */\n  public auth(): FireAuth {\n    return this.app.auth();\n  }\n  /** @deprecated */\n  public storage(): FireStorage {\n    return this.app.storage();\n  }\n  /** @deprecated */\n  public GetApp(): FireApp {\n    return this.app;\n  }\n  /** @deprecated */\n  public db(): FireStore {\n    return this.firestore;\n  }\n}\n\nfunction ObtainFirebaseApp(\n  firebaseConfig: {},\n  options: RAFirebaseOptions\n): firebase.app.App {\n  if (options.app) {\n    return options.app;\n  }\n  const isInitialized = !!firebase.apps?.length;\n  if (isInitialized) {\n    return firebase.app();\n  } else {\n    return firebase.initializeApp(firebaseConfig);\n  }\n}\n","import { RAFirebaseOptions } from '../options';\nimport { IFirebaseWrapper } from './firebase/IFirebaseWrapper';\nimport {\n  log,\n  getAbsolutePath,\n  messageTypes,\n  parseAllDatesDoc,\n  logWarn,\n  IFirestoreLogger,\n} from '../../misc';\nimport { FireStoreCollectionRef, FireStoreDocumentSnapshot, FireStoreQueryDocumentSnapshot } from 'misc/firebase-models';\n\nexport interface IResource {\n  path: string;\n  pathAbsolute: string;\n  collection: FireStoreCollectionRef;\n  list: Array<{} & { deleted?: boolean }>;\n}\n\nexport class ResourceManager {\n  private resources: Record<string, IResource> = {};\n\n  constructor(\n    private fireWrapper: IFirebaseWrapper,\n    private options: RAFirebaseOptions,\n    private flogger: IFirestoreLogger\n  ) {\n    this.fireWrapper.OnUserLogout(() => {\n      this.resources = {};\n    });\n  }\n\n  public async TryGetResource(\n    resourceName: string,\n    refresh?: 'REFRESH',\n    collectionQuery?: messageTypes.CollectionQueryType\n  ): Promise<IResource> {\n    if (refresh) {\n      await this.RefreshResource(resourceName, collectionQuery);\n    }\n    return this.TryGetResourcePromise(resourceName, collectionQuery);\n  }\n\n  public GetResource(relativePath: string): IResource {\n    const resource: IResource = this.resources[relativePath];\n    if (!resource) {\n      throw new Error(\n        `react-admin-firebase: Can't find resource: \"${relativePath}\"`\n      );\n    }\n    return resource;\n  }\n\n  public async TryGetResourcePromise(\n    relativePath: string,\n    collectionQuery?: messageTypes.CollectionQueryType\n  ): Promise<IResource> {\n    log('resourceManager.TryGetResourcePromise', {\n      relativePath,\n      collectionQuery,\n    });\n    await this.initPath(relativePath);\n\n    const resource: IResource = this.resources[relativePath];\n    if (!resource) {\n      throw new Error(\n        `react-admin-firebase: Cant find resource: \"${relativePath}\"`\n      );\n    }\n    return resource;\n  }\n\n  public async RefreshResource(\n    relativePath: string,\n    collectionQuery: messageTypes.CollectionQueryType | undefined\n  ) {\n    if (this.options?.lazyLoading?.enabled) {\n      logWarn('resourceManager.RefreshResource', {\n        warn: 'RefreshResource is not available in lazy loading mode',\n      });\n      throw new Error(\n        'react-admin-firebase: RefreshResource is not available in lazy loading mode'\n      );\n    }\n\n    log('resourceManager.RefreshResource', { relativePath, collectionQuery });\n    await this.initPath(relativePath);\n    const resource = this.resources[relativePath];\n\n    const collection = resource.collection;\n    const query = this.applyQuery(collection, collectionQuery);\n    const newDocs = await query.get();\n\n    resource.list = newDocs.docs.map((doc) => this.parseFireStoreDocument(doc));\n    const count = newDocs.docs.length;\n    this.flogger.logDocument(count)();\n    log('resourceManager.RefreshResource', {\n      newDocs,\n      resource,\n      collectionPath: collection.path,\n    });\n  }\n\n  public async GetSingleDoc(relativePath: string, docId: string) {\n    await this.initPath(relativePath);\n    const resource = this.GetResource(relativePath);\n    this.flogger.logDocument(1)();\n    const docSnap = await resource.collection.doc(docId).get();\n    if (!docSnap.exists) {\n      throw new Error('react-admin-firebase: No id found matching: ' + docId);\n    }\n    const result = this.parseFireStoreDocument(docSnap);\n    log('resourceManager.GetSingleDoc', {\n      relativePath,\n      resource,\n      docId,\n      docSnap,\n      result,\n    });\n    return result;\n  }\n\n  private async initPath(relativePath: string): Promise<void> {\n    const rootRef = this.options && this.options.rootRef;\n    const absolutePath = getAbsolutePath(rootRef, relativePath);\n    const hasBeenInited = !!this.resources[relativePath];\n    log('resourceManager.initPath()', {\n      absolutePath,\n      hasBeenInited,\n    });\n    if (hasBeenInited) {\n      log('resourceManager.initPath() has been initialized already...');\n      return;\n    }\n    const collection = this.fireWrapper.dbGetCollection(absolutePath);\n    const list: Array<{}> = [];\n    const resource: IResource = {\n      collection,\n      list,\n      path: relativePath,\n      pathAbsolute: absolutePath,\n    };\n    this.resources[relativePath] = resource;\n    log('resourceManager.initPath() setting resource...', {\n      resource,\n      allResources: this.resources,\n      collection: collection,\n      collectionPath: collection.path,\n    });\n  }\n\n  private parseFireStoreDocument(doc: FireStoreQueryDocumentSnapshot | FireStoreDocumentSnapshot | undefined): {} {\n    if (!doc) {\n      logWarn('parseFireStoreDocument: no doc', { doc });\n      return {};\n    }\n    const data = doc.data();\n    parseAllDatesDoc(data);\n    // React Admin requires an id field on every document,\n    // So we can just using the firestore document id\n    return { id: doc.id, ...data };\n  }\n\n  public async getUserIdentifier(): Promise<string> {\n    const identifier = this.options.associateUsersById\n      ? await this.getCurrentUserId()\n      : await this.getCurrentUserEmail();\n    return identifier;\n  }\n\n  private async getCurrentUserEmail() {\n    const user = await this.fireWrapper.authGetUserLoggedIn();\n    if (user) {\n      return user.email as string;\n    } else {\n      return 'annonymous user';\n    }\n  }\n  private async getCurrentUserId() {\n    const user = await this.fireWrapper.authGetUserLoggedIn();\n    if (user) {\n      return user.uid;\n    } else {\n      return 'annonymous user';\n    }\n  }\n\n  private applyQuery(\n    collection: FireStoreCollectionRef,\n    collectionQuery?: messageTypes.CollectionQueryType\n  ): FireStoreCollectionRef {\n    const collRef = collectionQuery ? collectionQuery(collection) : collection;\n\n    log('resourceManager.applyQuery() ...', {\n      collection,\n      collectionQuery: (collectionQuery || '-').toString(),\n      collRef,\n    });\n    return collRef;\n  }\n}\n","import { set, get } from \"lodash\";\nimport {\n  AddCreatedByFields,\n  AddUpdatedByFields,\n  IFirestoreLogger,\n  joinPaths,\n  log,\n  logError,\n  parseDocGetAllUploads,\n} from \"../../misc\";\nimport { RAFirebaseOptions } from \"../options\";\nimport { IFirebaseWrapper } from \"./firebase/IFirebaseWrapper\";\nimport { IResource, ResourceManager } from \"./ResourceManager\";\n\nexport class FireClient {\n  public rm: ResourceManager;\n\n  constructor(\n    public fireWrapper: IFirebaseWrapper,\n    public options: RAFirebaseOptions,\n    public flogger: IFirestoreLogger\n  ) {\n    this.rm = new ResourceManager(this.fireWrapper, this.options, this.flogger);\n  }\n\n  public checkRemoveIdField(obj: any, docId: string) {\n    if (!this.options.dontAddIdFieldToDoc) {\n      obj.id = docId;\n    }\n  }\n\n  public async parseDataAndUpload(r: IResource, id: string, data: any) {\n    if (!data) {\n      return data;\n    }\n    const docPath = r.collection.doc(id).path;\n\n    const uploads = parseDocGetAllUploads(data);\n    await Promise.all(\n      uploads.map(async (u) => {\n        const link = await this.uploadAndGetLink(\n          u.rawFile,\n          docPath,\n          u.fieldSlashesPath,\n          !!this.options.useFileNamesInStorage\n        );\n        set(data, u.fieldDotsPath + \".src\", link);\n      })\n    );\n    return data;\n  }\n\n  public async addCreatedByFields(obj: any) {\n    return AddCreatedByFields(obj, this.fireWrapper, this.rm, this.options);\n  }\n\n  public async addUpdatedByFields(obj: any) {\n    return AddUpdatedByFields(obj, this.fireWrapper, this.rm, this.options);\n  }\n\n  private async uploadAndGetLink(\n    rawFile: any,\n    docPath: string,\n    fieldPath: string,\n    useFileName: boolean\n  ): Promise<string | undefined> {\n    const storagePath = useFileName\n      ? joinPaths(docPath, fieldPath, rawFile.name)\n      : joinPaths(docPath, fieldPath);\n    return this.saveFile(storagePath, rawFile);\n  }\n\n  private async saveFile(\n    storagePath: string,\n    rawFile: any\n  ): Promise<string | undefined> {\n    log(\"saveFile() saving file...\", { storagePath, rawFile });\n    try {\n      const { taskResult, downloadUrl } = this.fireWrapper.putFile(storagePath, rawFile);\n      const getDownloadURL = await downloadUrl;\n      log(\"saveFile() saved file\", {\n        storagePath,\n        taskResult,\n        getDownloadURL,\n      });\n      return this.options.relativeFilePaths ? storagePath : getDownloadURL;\n    } catch (storageError) {\n      if (get(storageError, 'code') === \"storage/unknown\") {\n        logError(\n          'saveFile() error saving file, No bucket found! Try clicking \"Get Started\" in firebase -> storage',\n          { storageError }\n        );\n      } else {\n        logError(\"saveFile() error saving file\", {\n          storageError,\n        });\n      }\n    }\n  }\n}\n","import { RAFirebaseOptions } from \"index\";\nimport { IFirebaseWrapper, ResourceManager } from \"providers/database\";\n\nexport async function AddCreatedByFields(\n  obj: any,\n  fireWrapper: IFirebaseWrapper,\n  rm: Pick<ResourceManager, \"getUserIdentifier\">,\n  options: Pick<\n    RAFirebaseOptions,\n    | \"associateUsersById\"\n    | \"disableMeta\"\n    | \"renameMetaFields\"\n    | \"metaFieldCasing\"\n  >\n) {\n  if (options.disableMeta) {\n    return;\n  }\n  const currentUserIdentifier = await rm.getUserIdentifier();\n  const createAtSelector = GetSelectorsCreateAt(options);\n  const createBySelector = GetSelectorsCreateBy(options);\n  obj[createAtSelector] = fireWrapper.serverTimestamp();\n  obj[createBySelector] = currentUserIdentifier;\n}\n\nexport async function AddUpdatedByFields(\n  obj: any,\n  fireWrapper: IFirebaseWrapper,\n  rm: Pick<ResourceManager, \"getUserIdentifier\">,\n  options: Pick<\n    RAFirebaseOptions,\n    | \"associateUsersById\"\n    | \"disableMeta\"\n    | \"renameMetaFields\"\n    | \"metaFieldCasing\"\n  >\n) {\n  if (options.disableMeta) {\n    return;\n  }\n  const currentUserIdentifier = await rm.getUserIdentifier();\n  const updateAtSelector = GetSelectorsUpdateAt(options);\n  const updateBySelector = GetSelectorsUpdateBy(options);\n  obj[updateAtSelector] = fireWrapper.serverTimestamp();\n  obj[updateBySelector] = currentUserIdentifier;\n}\n\nexport function GetSelectorsUpdateAt(\n  options: Pick<RAFirebaseOptions, \"metaFieldCasing\" | \"renameMetaFields\">\n): string {\n  if (options.renameMetaFields && options.renameMetaFields.updated_at) {\n    return options.renameMetaFields.updated_at;\n  }\n  const casing = options.metaFieldCasing;\n  const defautCase = \"lastupdate\";\n  if (!casing) {\n    return defautCase;\n  }\n  if (casing === \"camel\") {\n    return \"lastUpdate\";\n  }\n  if (casing === \"snake\") {\n    return \"last_update\";\n  }\n  if (casing === \"pascal\") {\n    return \"LastUpdate\";\n  }\n  if (casing === \"kebab\") {\n    return \"last-update\";\n  }\n  return defautCase;\n}\n\nexport function GetSelectorsUpdateBy(\n  options: Pick<RAFirebaseOptions, \"metaFieldCasing\" | \"renameMetaFields\">\n): string {\n  if (options.renameMetaFields && options.renameMetaFields.updated_by) {\n    return options.renameMetaFields.updated_by;\n  }\n  const casing = options.metaFieldCasing;\n  const defautCase = \"updatedby\";\n  if (!casing) {\n    return defautCase;\n  }\n  if (casing === \"camel\") {\n    return \"updatedBy\";\n  }\n  if (casing === \"snake\") {\n    return \"updated_by\";\n  }\n  if (casing === \"pascal\") {\n    return \"UpdatedBy\";\n  }\n  if (casing === \"kebab\") {\n    return \"updated-by\";\n  }\n  return defautCase;\n}\n\nexport function GetSelectorsCreateAt(\n  options: Pick<RAFirebaseOptions, \"metaFieldCasing\" | \"renameMetaFields\">\n): string {\n  if (options.renameMetaFields && options.renameMetaFields.created_at) {\n    return options.renameMetaFields.created_at;\n  }\n  const casing = options.metaFieldCasing;\n  const defautCase = \"createdate\";\n  if (!casing) {\n    return defautCase;\n  }\n  if (casing === \"camel\") {\n    return \"createDate\";\n  }\n  if (casing === \"snake\") {\n    return \"create_date\";\n  }\n  if (casing === \"pascal\") {\n    return \"CreateDate\";\n  }\n  if (casing === \"kebab\") {\n    return \"create-date\";\n  }\n  return defautCase;\n}\n\nexport function GetSelectorsCreateBy(\n  options: Pick<RAFirebaseOptions, \"metaFieldCasing\" | \"renameMetaFields\">\n): string {\n  if (options.renameMetaFields && options.renameMetaFields.created_by) {\n    return options.renameMetaFields.created_by;\n  }\n  const casing = options.metaFieldCasing;\n  const defautCase = \"createdby\";\n  if (!casing) {\n    return defautCase;\n  }\n  if (casing === \"camel\") {\n    return \"createdBy\";\n  }\n  if (casing === \"snake\") {\n    return \"created_by\";\n  }\n  if (casing === \"pascal\") {\n    return \"CreatedBy\";\n  }\n  if (casing === \"kebab\") {\n    return \"created-by\";\n  }\n  return defautCase;\n}\n","import { FireStoreCollectionRef, FireStoreDocumentSnapshot, FireStoreQuery } from 'misc/firebase-models';\nimport { IFirestoreLogger, messageTypes } from '../../misc';\n\nexport function setQueryCursor(\n  doc: FireStoreDocumentSnapshot,\n  params: messageTypes.IParamsGetList,\n  resourceName: string\n) {\n  const key = btoa(JSON.stringify({ ...params, resourceName }));\n  localStorage.setItem(key, doc.id);\n\n  const allCursorsKey = `ra-firebase-cursor-keys_${resourceName}`;\n  const localCursorKeys = localStorage.getItem(allCursorsKey);\n  if (!localCursorKeys) {\n    localStorage.setItem(allCursorsKey, JSON.stringify([key]));\n  } else {\n    const cursors: string[] = JSON.parse(localCursorKeys);\n    const newCursors = cursors.concat(key);\n    localStorage.setItem(allCursorsKey, JSON.stringify(newCursors));\n  }\n}\n\nexport async function getQueryCursor(\n  collection: FireStoreCollectionRef,\n  params: messageTypes.IParamsGetList,\n  resourceName: string,\n  flogger: IFirestoreLogger\n): Promise<FireStoreDocumentSnapshot | false> {\n  const key = btoa(JSON.stringify({ ...params, resourceName }));\n  const docId = localStorage.getItem(key);\n  if (!docId) {\n    return false;\n  }\n\n  const doc = await collection.doc(docId).get();\n  flogger.logDocument(1)();\n  if (doc.exists) {\n    // incrementFirebaseReadsCounter(1);\n    return doc;\n  }\n  return false;\n}\n\nexport function clearQueryCursors(resourceName: string) {\n  const allCursorsKey = `ra-firebase-cursor-keys_${resourceName}`;\n  const localCursorKeys = localStorage.getItem(allCursorsKey);\n  if (localCursorKeys) {\n    const cursors: string[] = JSON.parse(localCursorKeys);\n    cursors.forEach((cursor) => localStorage.removeItem(cursor));\n    localStorage.removeItem(allCursorsKey);\n  }\n}\n\nexport async function findLastQueryCursor(\n  collection: FireStoreCollectionRef,\n  queryBase: FireStoreQuery,\n  params: messageTypes.IParamsGetList,\n  resourceName: string,\n  flogger: IFirestoreLogger\n) {\n  const { page, perPage } = params.pagination;\n\n  let lastQueryCursor: FireStoreDocumentSnapshot | false = false;\n  let currentPage = page - 1;\n\n  const currentPageParams = {\n    ...params,\n    pagination: {\n      ...params.pagination,\n    },\n  };\n  while (!lastQueryCursor && currentPage > 1) {\n    currentPage--;\n    currentPageParams.pagination.page = currentPage;\n    console.log('getting query cursor currentPage=', currentPage);\n    lastQueryCursor = await getQueryCursor(\n      collection,\n      currentPageParams,\n      resourceName,\n      flogger\n    );\n  }\n  const limit = (page - currentPage) * perPage;\n  const isFirst = currentPage === 1;\n\n  function getQuery() {\n    if (isFirst) {\n      return queryBase.limit(limit);\n    } else {\n      return queryBase.startAt(lastQueryCursor).limit(limit);\n    }\n  }\n\n  const newQuery = getQuery();\n  const snapshots = await newQuery.get();\n  const docsLength = snapshots.docs.length;\n  flogger.logDocument(docsLength)();\n  const lastDocIndex = docsLength - 1;\n  const lastDocRef = snapshots.docs[lastDocIndex];\n  return lastDocRef;\n}\n","import { FireStoreCollectionRef, FireStoreQuery, FireStoreQueryOrder } from 'misc/firebase-models';\nimport { IFirestoreLogger, messageTypes } from '../../misc';\nimport { findLastQueryCursor, getQueryCursor } from './queryCursors';\n\ninterface ParamsToQueryOptions {\n  filters?: boolean;\n  sort?: boolean;\n  pagination?: boolean;\n}\n\nconst defaultParamsToQueryOptions = {\n  filters: true,\n  sort: true,\n  pagination: true,\n};\n\nexport async function paramsToQuery<\n  TParams extends messageTypes.IParamsGetList\n>(\n  collection: FireStoreCollectionRef,\n  params: TParams,\n  resourceName: string,\n  flogger: IFirestoreLogger,\n  options: ParamsToQueryOptions = defaultParamsToQueryOptions\n): Promise<FireStoreQuery> {\n  const filtersStepQuery = options.filters\n    ? filtersToQuery(collection, params.filter)\n    : collection;\n\n  const sortStepQuery = options.sort\n    ? sortToQuery(filtersStepQuery, params.sort)\n    : filtersStepQuery;\n\n  return options.pagination\n    ? paginationToQuery(\n        sortStepQuery,\n        params,\n        collection,\n        resourceName,\n        flogger\n      )\n    : sortStepQuery;\n}\n\nexport function filtersToQuery(\n  query: FireStoreQuery,\n  filters: { [fieldName: string]: any }\n): FireStoreQuery {\n  const res = Object.entries(filters).reduce((acc,[fieldName, fieldValue]) => {\n    const opStr = fieldValue && Array.isArray(fieldValue) ? 'in' : '==';\n    return acc.where(fieldName, opStr, fieldValue);\n  }, query);\n  return res;\n}\n\nexport function sortToQuery(\n  query: FireStoreQuery,\n  sort: { field: string; order: string }\n): FireStoreQuery {\n  if (sort != null && sort.field !== 'id') {\n    const { field, order } = sort;\n    const parsedOrder = order.toLocaleLowerCase() as FireStoreQueryOrder;\n    return query.orderBy(field, parsedOrder);\n  }\n  return query;\n}\n\nasync function paginationToQuery<TParams extends messageTypes.IParamsGetList>(\n  query: FireStoreQuery,\n  params: TParams,\n  collection: FireStoreCollectionRef,\n  resourceName: string,\n  flogger: IFirestoreLogger\n): Promise<FireStoreQuery> {\n  const { page, perPage } = params.pagination;\n  if (page === 1) {\n    query = query.limit(perPage);\n  } else {\n    let queryCursor = await getQueryCursor(\n      collection,\n      params,\n      resourceName,\n      flogger\n    );\n    if (!queryCursor) {\n      queryCursor = await findLastQueryCursor(\n        collection,\n        query,\n        params,\n        resourceName,\n        flogger\n      );\n    }\n    query = query.startAfter(queryCursor).limit(perPage);\n  }\n\n  return query;\n}\n\nexport function getFullParamsForQuery<\n  TParams extends messageTypes.IParamsGetList\n>(reactAdminParams: TParams, softdeleteEnabled: boolean): TParams {\n  return {\n    ...reactAdminParams,\n    filter: softdeleteEnabled\n      ? {\n          deleted: false,\n          ...reactAdminParams.filter,\n        }\n      : reactAdminParams.filter,\n  };\n}\n\nexport function getNextPageParams<TParams extends messageTypes.IParamsGetList>(\n  params: TParams\n): TParams {\n  return {\n    ...params,\n    pagination: {\n      ...params.pagination,\n      page: params.pagination.page + 1,\n    },\n  };\n}\n","import {\n  log,\n  messageTypes,\n  parseFireStoreDocument,\n  recursivelyMapStorageUrls,\n} from '../../misc';\nimport { IResource, ResourceManager } from '../database/ResourceManager';\nimport { RAFirebaseOptions } from '../options';\nimport * as ra from '../../misc/react-admin-models';\nimport {\n  getFullParamsForQuery,\n  getNextPageParams,\n  paramsToQuery,\n} from './paramsToQuery';\nimport { clearQueryCursors, setQueryCursor } from './queryCursors';\nimport { FireClient } from 'providers/database';\nimport { FireStoreCollectionRef, FireStoreDocumentSnapshot } from 'misc/firebase-models';\n\nexport class FirebaseLazyLoadingClient {\n  constructor(\n    private readonly options: RAFirebaseOptions,\n    private readonly rm: ResourceManager,\n    private client: FireClient\n  ) {}\n\n  public async apiGetList<T extends ra.Record>(\n    resourceName: string,\n    reactAdminParams: ra.GetListParams\n  ): Promise<ra.GetListResult<T>> {\n    const r = await this.tryGetResource(resourceName);\n    const params = getFullParamsForQuery(\n      reactAdminParams,\n      !!this.options.softDelete\n    );\n\n    log('apiGetListLazy', { resourceName, params });\n\n    const query = await paramsToQuery(\n      r.collection,\n      params,\n      resourceName,\n      this.client.flogger\n    );\n\n    const snapshots = await query.get();\n\n    const resultsCount = snapshots.docs.length;\n    if (!resultsCount) {\n      log('apiGetListLazy', {\n        message: 'There are not records for given query',\n      });\n      return { data: [], total: 0 };\n    }\n    this.client.flogger.logDocument(resultsCount)();\n\n    const data = snapshots.docs.map(d => parseFireStoreDocument(d)) as T[];\n    const nextPageCursor = snapshots.docs[snapshots.docs.length - 1];\n    // After fetching documents save queryCursor for next page\n    setQueryCursor(nextPageCursor, getNextPageParams(params), resourceName);\n    // Hardcoded to allow next pages, as we don't have total number of items\n    let total = 9000;\n\n    // Check for next pages\n    // If it's last page, we can count all items and disable going to next page\n    const isOnLastPage = await this.checkIfOnLastPage(\n      r.collection,\n      params,\n      resourceName,\n      nextPageCursor\n    );\n\n    if (isOnLastPage) {\n      const { page, perPage } = params.pagination;\n      total = (page - 1) * perPage + data.length;\n      log('apiGetListLazy', { message: \"It's last page of collection.\" });\n    }\n\n    if (this.options.relativeFilePaths) {\n      const parsedData = await Promise.all(\n        data.map(async (doc: any) => {\n          for (let fieldName in doc) {\n            doc[fieldName] = await recursivelyMapStorageUrls(\n              this.client.fireWrapper,\n              doc[fieldName]\n            );\n          }\n          return doc;\n        })\n      );\n\n      log('apiGetListLazy result', {\n        docs: parsedData,\n        resource: r,\n        collectionPath: r.collection.path,\n      });\n\n      return {\n        data: parsedData,\n        total,\n      };\n    }\n\n    log('apiGetListLazy result', {\n      docs: data,\n      resource: r,\n      collectionPath: r.collection.path,\n    });\n\n    return { data, total };\n  }\n\n  public async apiGetManyReference(\n    resourceName: string,\n    reactAdminParams: messageTypes.IParamsGetManyReference\n  ): Promise<messageTypes.IResponseGetManyReference> {\n    const r = await this.tryGetResource(resourceName);\n    log('apiGetManyReferenceLazy', {\n      resourceName,\n      resource: r,\n      reactAdminParams,\n    });\n    const filterWithTarget = {\n      ...reactAdminParams.filter,\n      [reactAdminParams.target]: reactAdminParams.id,\n    };\n    const params = getFullParamsForQuery(\n      {\n        ...reactAdminParams,\n        filter: filterWithTarget,\n      },\n      !!this.options.softDelete\n    );\n\n    const query = await paramsToQuery(\n      r.collection,\n      params,\n      resourceName,\n      this.client.flogger\n    );\n\n    const snapshots = await query.get();\n    const resultsCount = snapshots.docs.length;\n    this.client.flogger.logDocument(resultsCount)();\n    const data = snapshots.docs.map(d => parseFireStoreDocument(d));\n    if (this.options.relativeFilePaths) {\n      const parsedData = await Promise.all(\n        data.map(async (doc: any) => {\n          for (let fieldName in doc) {\n            doc[fieldName] = await recursivelyMapStorageUrls(\n              this.client.fireWrapper,\n              doc[fieldName]\n            );\n          }\n          return doc;\n        })\n      );\n\n      log('apiGetManyReferenceLazy result', {\n        docs: parsedData,\n        resource: r,\n        collectionPath: r.collection.path,\n      });\n\n      return {\n        data: parsedData,\n        total: data.length,\n      };\n    }\n\n    log('apiGetManyReferenceLazy result', {\n      docs: data,\n      resource: r,\n      collectionPath: r.collection.path,\n    });\n    return { data, total: data.length };\n  }\n\n  private async checkIfOnLastPage<TParams extends messageTypes.IParamsGetList>(\n    collection: FireStoreCollectionRef,\n    params: TParams,\n    resourceName: string,\n    nextPageCursor: FireStoreDocumentSnapshot,\n  ): Promise<boolean> {\n    const query = await paramsToQuery(\n      collection,\n      params,\n      resourceName,\n      this.client.flogger,\n      {\n        filters: true,\n        sort: true,\n      }\n    );\n    if (!nextPageCursor) {\n      throw new Error('Page cursor was empty...');\n    }\n    const nextElementSnapshot = await query\n      .startAfter(nextPageCursor)\n      .limit(1)\n      .get();\n\n    if (!nextElementSnapshot.empty) {\n      // this.incrementFirebaseReadsCounter(1);\n    }\n\n    return nextElementSnapshot.empty;\n  }\n\n  public clearQueryCursors(resourceName: string) {\n    clearQueryCursors(resourceName);\n  }\n\n  private async tryGetResource(\n    resourceName: string,\n    collectionQuery?: messageTypes.CollectionQueryType\n  ): Promise<IResource> {\n    return this.rm.TryGetResourcePromise(resourceName, collectionQuery);\n  }\n}\n","import { messageTypes } from './../misc/messageTypes';\nimport { log, retrieveStatusTxt, logWarn, logger } from '../misc';\nimport { RAFirebaseOptions } from './options';\nimport { FirebaseWrapper } from './database/firebase/FirebaseWrapper';\nimport {\n  AuthProvider as RaAuthProvider,\n  UserIdentity,\n} from '../misc/react-admin-models';\nimport { IFirebaseWrapper } from './database';\nimport { FireUser } from 'misc/firebase-models';\n\nclass AuthClient {\n  private fireWrapper: IFirebaseWrapper;\n\n  constructor(firebaseConfig: {}, optionsInput?: RAFirebaseOptions) {\n    const options = optionsInput || {};\n    log('Auth Client: initializing...', { firebaseConfig, options });\n    this.fireWrapper = new FirebaseWrapper(options, firebaseConfig);\n    options.persistence && this.setPersistence(options.persistence);\n  }\n\n  setPersistence(persistenceInput: 'session' | 'local' | 'none') {\n    return this.fireWrapper.authSetPersistence(persistenceInput);\n  }\n\n  public async HandleAuthLogin(params: { username: string; password: string }) {\n    const { username, password } = params;\n\n    if (username && password) {\n      try {\n        const user = await this.fireWrapper.authSigninEmailPassword(\n          username,\n          password\n        );\n        log('HandleAuthLogin: user sucessfully logged in', { user });\n        return user;\n      } catch (e) {\n        log('HandleAuthLogin: invalid credentials', { params });\n        throw new Error('Login error: invalid credentials');\n      }\n    } else {\n      return this.getUserLogin();\n    }\n  }\n\n  public HandleAuthLogout() {\n    return this.fireWrapper.authSignOut();\n  }\n\n  public HandleAuthError(errorHttp: messageTypes.HttpErrorType) {\n    log('HandleAuthLogin: invalid credentials', { errorHttp });\n    const status = !!errorHttp && errorHttp.status;\n    const statusTxt = retrieveStatusTxt(status);\n    if (statusTxt === 'ok') {\n      log('API is actually authenticated');\n      return Promise.resolve();\n    }\n    logWarn('Recieved authentication error from API');\n    return Promise.reject();\n  }\n\n  public async HandleAuthCheck(): Promise<any> {\n    return this.getUserLogin();\n  }\n\n  public getUserLogin(): Promise<FireUser> {\n    return this.fireWrapper.authGetUserLoggedIn();\n  }\n\n  public async HandleGetPermissions() {\n    try {\n      const user = await this.getUserLogin();\n      // @ts-ignore\n      const token = await user.getIdTokenResult();\n\n      return token.claims;\n    } catch (e) {\n      log('HandleGetPermission: no user is logged in or tokenResult error', {\n        e,\n      });\n      return null;\n    }\n  }\n\n  public async HandleGetIdentity(): Promise<UserIdentity> {\n    try {\n      const { uid, displayName, photoURL } = await this.getUserLogin();\n      const identity: UserIdentity = {\n        id: uid,\n        fullName: `${displayName ?? ''}`,\n        avatar: `${photoURL ?? ''}`,\n      };\n      return identity;\n    } catch (e) {\n      log('HandleGetIdentity: no user is logged in', {\n        e,\n      });\n      return null as any;\n    }\n  }\n\n  public async HandleGetJWTAuthTime() {\n    try {\n      const user = await this.getUserLogin();\n      // @ts-ignore\n      const token = await user.getIdTokenResult();\n\n      return token.authTime;\n    } catch (e) {\n      log('HandleGetJWTAuthTime: no user is logged in or tokenResult error', {\n        e,\n      });\n      return null;\n    }\n  }\n\n  public async HandleGetJWTExpirationTime() {\n    try {\n      const user = await this.getUserLogin();\n      // @ts-ignore\n      const token = await user.getIdTokenResult();\n\n      return token.expirationTime;\n    } catch (e) {\n      log(\n        'HandleGetJWTExpirationTime: no user is logged in or tokenResult error',\n        {\n          e,\n        }\n      );\n      return null;\n    }\n  }\n\n  public async HandleGetJWTSignInProvider() {\n    try {\n      const user = await this.getUserLogin();\n      // @ts-ignore\n      const token = await user.getIdTokenResult();\n\n      return token.signInProvider;\n    } catch (e) {\n      log(\n        'HandleGetJWTSignInProvider: no user is logged in or tokenResult error',\n        {\n          e,\n        }\n      );\n      return null;\n    }\n  }\n\n  public async HandleGetJWTIssuedAtTime() {\n    try {\n      const user = await this.getUserLogin();\n      // @ts-ignore\n      const token = await user.getIdTokenResult();\n\n      return token.issuedAtTime;\n    } catch (e) {\n      log(\n        'HandleGetJWTIssuedAtTime: no user is logged in or tokenResult error',\n        {\n          e,\n        }\n      );\n      return null;\n    }\n  }\n\n  public async HandleGetJWTToken() {\n    try {\n      const user = await this.getUserLogin();\n      // @ts-ignore\n      const token = await user.getIdTokenResult();\n\n      return token.token;\n    } catch (e) {\n      log(\n        'HandleGetJWTIssuedAtTime: no user is logged in or tokenResult error',\n        {\n          e,\n        }\n      );\n      return null;\n    }\n  }\n}\n\nexport function AuthProvider(\n  firebaseConfig: {},\n  options: RAFirebaseOptions\n): RaAuthProvider {\n  VerifyAuthProviderArgs(firebaseConfig, options);\n  logger.SetEnabled(!!options?.logging);\n  const auth = new AuthClient(firebaseConfig, options);\n\n  const provider: RaAuthProvider = {\n    // React Admin Interface\n    login: (params) => auth.HandleAuthLogin(params),\n    logout: () => auth.HandleAuthLogout(),\n    checkAuth: () => auth.HandleAuthCheck(),\n    checkError: (error) => auth.HandleAuthError(error),\n    getPermissions: () => auth.HandleGetPermissions(),\n    getIdentity: () => auth.HandleGetIdentity(),\n    // Custom Functions\n    getAuthUser: () => auth.getUserLogin(),\n    getJWTAuthTime: () => auth.HandleGetJWTAuthTime(),\n    getJWTExpirationTime: () => auth.HandleGetJWTExpirationTime(),\n    getJWTSignInProvider: () => auth.HandleGetJWTSignInProvider(),\n    getJWTClaims: () => auth.HandleGetPermissions(),\n    getJWTToken: () => auth.HandleGetJWTToken(),\n  };\n  return provider;\n}\n\nfunction VerifyAuthProviderArgs(\n  firebaseConfig: {},\n  options: RAFirebaseOptions\n) {\n  const hasNoApp = !options || !options.app;\n  const hasNoConfig = !firebaseConfig;\n  if (hasNoConfig && hasNoApp) {\n    throw new Error(\n      'Please pass the Firebase firebaseConfig object or options.app to the FirebaseAuthProvider'\n    );\n  }\n}\n","// From firebase SDK\n\nimport { logError } from \"./logger\";\n\n// - https://github.com/firebase/firebase-js-sdk/blob/9f109f85ad0d99f6c13e68dcb549a0b852e35a2a/packages/functions/src/api/error.ts\nexport function retrieveStatusTxt(status: number): 'ok' | 'unauthenticated' {\n  // Make sure any successful status is OK.\n  if (status >= 200 && status < 300) {\n    return 'ok';\n  }\n  switch (status) {\n    case 401: // 'unauthenticated'\n    case 403: // 'permission-denied'\n      return 'unauthenticated';\n\n    case 0: // 'internal'\n    case 400: // 'invalid-argument'\n    case 404: // 'not-found'\n    case 409: // 'aborted'\n    case 429: // 'resource-exhausted'\n    case 499: // 'cancelled'\n    case 500: // 'internal'\n    case 501: // 'unimplemented'\n    case 503: // 'unavailable'\n    case 504: // 'deadline-exceeded'\n    default:\n      // ignore\n      return 'ok';\n  }\n}\n\n// From firebase SDK\n// tslint:disable-next-line:max-line-length\n// - https://github.com/firebase/firebase-js-sdk/blob/9f109f85ad0d99f6c13e68dcb549a0b852e35a2a/packages/functions/src/api/error.ts\nexport function retrieveStatusCode(statusTxt: string): number {\n  // Make sure any successful status is OK.\n  const regexResult = /\\[code\\=([\\w-]*)/g.exec(statusTxt);\n  const status = Array.isArray(regexResult) && regexResult[1];\n  if (!status) {\n    logError('unknown StatusCode ', {statusTxt});\n  }\n  switch (status) {\n    case 'unauthenticated':\n      return 401;\n    case 'permission-denied':\n      return 403;\n    case 'internal':\n      return 0;\n    case 'invalid-argument':\n      return 400;\n    case 'not-found':\n      return 404;\n    case 'aborted':\n      return 409;\n    case 'resource-exhausted':\n      return 429;\n    case 'cancelled':\n      return 499;\n    case 'internal':\n      return 500;\n    case 'unimplemented':\n      return 501;\n    case 'unavailable':\n      return 503;\n    case 'deadline-exceeded':\n      return 504;\n    default:\n      return 200;\n  }\n}\n","import {\n  getAbsolutePath,\n  log,\n  logger,\n  retrieveStatusCode,\n  logError,\n  MakeFirestoreLogger,\n} from \"../misc\";\nimport * as ra from \"../misc/react-admin-models\";\nimport { RAFirebaseOptions } from \"./options\";\nimport { FirebaseWrapper } from \"./database/firebase/FirebaseWrapper\";\nimport { FireApp } from \"../misc/firebase-models\";\nimport { FireClient } from \"./database/FireClient\";\nimport { GetList, GetMany, GetManyReference, GetOne } from \"./queries\";\nimport { Create, Delete, DeleteMany, Update, UpdateMany } from \"./commands\";\n\nexport interface IDataProvider extends ra.DataProvider {\n  app: FireApp;\n}\n\nexport function DataProvider(\n  firebaseConfig: {},\n  optionsInput?: RAFirebaseOptions\n): IDataProvider {\n  const options = optionsInput || {};\n  verifyDataProviderArgs(firebaseConfig, options);\n\n  const flogger = MakeFirestoreLogger(options);\n  logger.SetEnabled(!!options?.logging);\n  flogger.SetEnabled(!!options?.firestoreCostsLogger?.enabled);\n  flogger.ResetCount(!options?.firestoreCostsLogger?.persistCount);\n  log('Creating FirebaseDataProvider', {\n    firebaseConfig,\n    options\n  });\n\n  const fireWrapper = new FirebaseWrapper(optionsInput, firebaseConfig);\n\n  async function run<T>(cb: () => Promise<T>) {\n    let res: any;\n    try {\n      res = await cb();\n      return res;\n    } catch (error) {\n      const errorMsg = ((error as any) || '').toString();\n      const code = retrieveStatusCode(errorMsg);\n      const errorObj = { status: code, message: errorMsg, json: res };\n      logError(\"DataProvider:\", error, { errorMsg, code, errorObj });\n      throw errorObj;\n    }\n  }\n  const client = new FireClient(fireWrapper, options, flogger);\n\n  const newProviderApi: IDataProvider = {\n    app: fireWrapper.GetApp(),\n    getList<RecordType extends ra.Record = ra.Record>(\n      resource: string,\n      params: ra.GetListParams\n    ): Promise<ra.GetListResult<RecordType>> {\n      return run(() => GetList<RecordType>(resource, params, client));\n    },\n    getOne<RecordType extends ra.Record = ra.Record>(\n      resource: string,\n      params: ra.GetOneParams\n    ): Promise<ra.GetOneResult<RecordType>> {\n      return run(() => GetOne<RecordType>(resource, params, client));\n    },\n    getMany<RecordType extends ra.Record = ra.Record>(\n      resource: string,\n      params: ra.GetManyParams\n    ): Promise<ra.GetManyResult<RecordType>> {\n      return run(() => GetMany<RecordType>(resource, params, client));\n    },\n    getManyReference<RecordType extends ra.Record = ra.Record>(\n      resource: string,\n      params: ra.GetManyReferenceParams\n    ): Promise<ra.GetManyReferenceResult<RecordType>> {\n      return run(() =>\n        GetManyReference<RecordType>(resource, params, client)\n      );\n    },\n    update<RecordType extends ra.Record = ra.Record>(\n      resource: string,\n      params: ra.UpdateParams\n    ): Promise<ra.UpdateResult<RecordType>> {\n      return run(() => Update<RecordType>(resource, params, client));\n    },\n    updateMany(\n      resource: string,\n      params: ra.UpdateManyParams\n    ): Promise<ra.UpdateManyResult> {\n      return run(() => UpdateMany(resource, params, client));\n    },\n    create<RecordType extends ra.Record = ra.Record>(\n      resource: string,\n      params: ra.CreateParams\n    ): Promise<ra.CreateResult<RecordType>> {\n      return run(() => Create<RecordType>(resource, params, client));\n    },\n    delete<RecordType extends ra.Record = ra.Record>(\n      resource: string,\n      params: ra.DeleteParams\n    ): Promise<ra.DeleteResult<RecordType>> {\n      return run(() => Delete(resource, params, client));\n    },\n    deleteMany(\n      resource: string,\n      params: ra.DeleteManyParams\n    ): Promise<ra.DeleteManyResult> {\n      return run(() => DeleteMany(resource, params, client));\n    },\n  };\n\n  return newProviderApi;\n}\n\nfunction verifyDataProviderArgs(\n  firebaseConfig: {},\n  options?: RAFirebaseOptions\n) {\n  const hasNoApp = !options || !options.app;\n  const hasNoConfig = !firebaseConfig;\n  if (hasNoConfig && hasNoApp) {\n    throw new Error(\n      'Please pass the Firebase firebaseConfig object or options.app to the FirebaseAuthProvider'\n    );\n  }\n  if (options && options.rootRef) {\n    // Will throw error if rootRef doesn't point to a document\n    getAbsolutePath(options.rootRef, 'test');\n  }\n}\n","import { FireClient } from '../database/FireClient';\nimport { FirebaseLazyLoadingClient } from '../lazy-loading/FirebaseLazyLoadingClient';\nimport {\n  filterArray,\n  log,\n  recursivelyMapStorageUrls,\n  sortArray,\n} from '../../misc';\nimport * as ra from '../../misc/react-admin-models';\n\nexport async function GetList<T extends ra.Record>(\n  resourceName: string,\n  params: ra.GetListParams,\n  client: FireClient\n): Promise<ra.GetListResult<T>> {\n  log('GetList', { resourceName, params });\n  const { rm, fireWrapper, options } = client;\n\n  if (options?.lazyLoading?.enabled) {\n    const lazyClient = new FirebaseLazyLoadingClient(\n      options,\n      rm,\n      client\n    );\n    return lazyClient.apiGetList<T>(resourceName, params);\n  }\n\n  const filterSafe = params.filter || {};\n\n  const collectionQuery = filterSafe.collectionQuery;\n  delete filterSafe.collectionQuery;\n\n  const r = await rm.TryGetResource(resourceName, 'REFRESH', collectionQuery);\n  const data = r.list;\n  if (params.sort != null) {\n    const { field, order } = params.sort;\n    if (order === 'ASC') {\n      sortArray(data, field, 'asc');\n    } else {\n      sortArray(data, field, 'desc');\n    }\n  }\n  let softDeleted = data;\n  if (options.softDelete && !Object.keys(filterSafe).includes('deleted')) {\n    softDeleted = data.filter((doc) => !doc.deleted);\n  }\n  const filteredData = filterArray(softDeleted, filterSafe);\n  const pageStart = (params.pagination.page - 1) * params.pagination.perPage;\n  const pageEnd = pageStart + params.pagination.perPage;\n  const dataPage = filteredData.slice(pageStart, pageEnd) as T[];\n  const total = filteredData.length;\n\n  if (options.relativeFilePaths) {\n    const data = await Promise.all(\n      dataPage.map((doc) => recursivelyMapStorageUrls(fireWrapper, doc))\n    );\n    return {\n      data,\n      total,\n    };\n  }\n\n  return {\n    data: dataPage,\n    total,\n  };\n}\n","import { FireClient } from '../database/FireClient';\nimport { log, recursivelyMapStorageUrls } from '../../misc';\nimport * as ra from '../../misc/react-admin-models';\n\nexport async function GetOne<T extends ra.Record>(\n  resourceName: string,\n  params: ra.GetOneParams,\n  client: FireClient\n): Promise<ra.GetOneResult<T>> {\n  log('GetOne', { resourceName, params });\n  const { rm, fireWrapper } = client;\n  try {\n    const id = params.id + '';\n    const dataSingle = await rm.GetSingleDoc(resourceName, id);\n    client.flogger.logDocument(1)();\n    const data = await recursivelyMapStorageUrls(fireWrapper, dataSingle);\n    return { data: data };\n  } catch (error) {\n    throw new Error(\n      'Error getting id: ' + params.id + ' from collection: ' + resourceName\n    );\n  }\n}\n","import { FireClient } from '../database/FireClient';\nimport { log, recursivelyMapStorageUrls } from '../../misc';\nimport * as ra from '../../misc/react-admin-models';\n\nexport async function GetMany<T extends ra.Record>(\n  resourceName: string,\n  params: ra.GetManyParams,\n  client: FireClient\n): Promise<ra.GetManyResult<T>> {\n  const { rm, options, fireWrapper } = client;\n  const r = await rm.TryGetResource(resourceName);\n  log('GetMany', { resourceName, resource: r, params });\n  const ids = params.ids;\n  const matchDocSnaps = await Promise.all(\n    ids.map((id) => r.collection.doc(id + '').get())\n  );\n  client.flogger.logDocument(ids.length)();\n  const matches = matchDocSnaps.map((snap) => {\n    return { ...snap.data(), id: snap.id } as T;\n  });\n  const permittedData = options.softDelete\n    ? matches.filter((row) => !row['deleted'])\n    : matches;\n  if (options.relativeFilePaths) {\n    const data = await Promise.all(\n      permittedData.map((doc) => recursivelyMapStorageUrls(fireWrapper, doc))\n    );\n    return {\n      data,\n    };\n  }\n\n  return {\n    data: permittedData,\n  };\n}\n","import { FireClient } from \"../database/FireClient\";\nimport { filterArray, log, recursivelyMapStorageUrls, sortArray } from \"../../misc\";\nimport * as ra from \"../../misc/react-admin-models\";\n\nexport async function GetManyReference<T extends ra.Record>(\n  resourceName: string,\n  params: ra.GetManyReferenceParams,\n  client: FireClient\n): Promise<ra.GetManyReferenceResult<T>> {\n  const { rm, options, fireWrapper } = client;\n  log(\"GetManyReference\", { resourceName, params });\n  const filterSafe = params.filter || {};\n  const collectionQuery = filterSafe.collectionQuery;\n  const r = await rm.TryGetResource(\n    resourceName,\n    \"REFRESH\",\n    collectionQuery\n  );\n  delete filterSafe.collectionQuery;\n  log(\"apiGetManyReference\", { resourceName, resource: r, params });\n  const data = r.list;\n  const targetField = params.target;\n  const targetValue = params.id;\n  let softDeleted = data;\n  if (options.softDelete) {\n    softDeleted = data.filter(doc => !doc['deleted'])\n  }\n  const filteredData = filterArray(softDeleted, filterSafe);\n  const targetIdFilter: Record<string, ra.Identifier> = {};\n  targetIdFilter[targetField] = targetValue;\n  const permittedData = filterArray(filteredData, targetIdFilter);\n  if (params.sort != null) {\n    const { field, order } = params.sort;\n    if (order === \"ASC\") {\n      sortArray(permittedData, field, \"asc\");\n    } else {\n      sortArray(permittedData, field, \"desc\");\n    }\n  }\n  const pageStart = (params.pagination.page - 1) * params.pagination.perPage;\n  const pageEnd = pageStart + params.pagination.perPage;\n  const dataPage = permittedData.slice(pageStart, pageEnd) as T[];\n  const total = permittedData.length;\n\n  if (options.relativeFilePaths) {\n    const data = await Promise.all(\n      permittedData.map((doc) =>\n        recursivelyMapStorageUrls(fireWrapper, doc)\n      )\n    );\n    return { data, total };\n  }\n\n  return { data: dataPage, total };\n}\n","import { FireClient } from \"../database/FireClient\";\nimport { log } from \"../../misc\";\nimport * as ra from \"../../misc/react-admin-models\";\n\nexport async function Update<T extends ra.Record>(\n  resourceName: string,\n  params: ra.UpdateParams,\n  client: FireClient\n): Promise<ra.UpdateResult<T>> {\n  const { rm } = client;\n  log(\"Update\", { resourceName, params });\n  const id = params.id + \"\";\n  delete params.data.id;\n  const r = await rm.TryGetResource(resourceName);\n  log(\"Update\", { resourceName, resource: r, params });\n  const data = await client.parseDataAndUpload(r, id, params.data);\n  const docObj = { ...data };\n  client.checkRemoveIdField(docObj, id);\n  await client.addUpdatedByFields(docObj);\n  await r.collection.doc(id).update(docObj);\n  return {\n    data: {\n      ...data,\n      id: id,\n    },\n  };\n}\n","import { FireClient } from \"../database/FireClient\";\nimport { log } from \"../../misc\";\nimport * as ra from \"../../misc/react-admin-models\";\n\nexport async function UpdateMany(\n  resourceName: string,\n  params: ra.UpdateManyParams,\n  client: FireClient\n): Promise<ra.UpdateManyResult> {\n  const { rm } = client;\n  log(\"UpdateMany\", { resourceName, params });\n  delete params.data.id;\n  const r = await rm.TryGetResource(resourceName);\n  log(\"UpdateMany\", { resourceName, resource: r, params });\n  const ids = params.ids;\n  const returnData = await Promise.all(\n    ids.map(async id => {\n      const idStr = id+'';\n      const data = await client.parseDataAndUpload(r, idStr, params.data);\n      const docObj = { ...data };\n      client.checkRemoveIdField(docObj, idStr);\n      await client.addUpdatedByFields(docObj);\n      await r.collection\n        .doc(idStr)\n        .update(docObj);\n      return {\n        ...data,\n        id: idStr\n      };\n    })\n  );\n  return {\n    data: returnData\n  };\n}\n","import { FireClient } from \"../database/FireClient\";\nimport { log } from \"../../misc\";\nimport * as ra from \"../../misc/react-admin-models\";\n\nexport async function Create<T extends ra.Record>(\n  resourceName: string,\n  params: ra.CreateParams,\n  client: FireClient\n): Promise<ra.CreateResult<T>> {\n  const { rm, fireWrapper } = client;\n  const r = await rm.TryGetResource(resourceName);\n  log(\"Create\", { resourceName, resource: r, params });\n  const hasOverridenDocId = params.data && params.data.id;\n  log(\"Create\", { hasOverridenDocId });\n  if (hasOverridenDocId) {\n    const overridenId = params.data.id;\n    const exists = (await r.collection.doc(overridenId).get()).exists;\n    if (exists) {\n      throw new Error(\n        `the id:\"${overridenId}\" already exists, please use a unique string if overriding the 'id' field`\n      );\n    }\n    const data = await client.parseDataAndUpload(r, overridenId, params.data);\n    if (!overridenId) {\n      throw new Error(\"id must be a valid string\");\n    }\n    const docObj = { ...data };\n    client.checkRemoveIdField(docObj, overridenId);\n    await client.addCreatedByFields(docObj);\n    await client.addUpdatedByFields(docObj);\n    log(\"Create\", { docObj });\n    await r.collection.doc(overridenId).set(docObj, { merge: false });\n    return {\n      data: {\n        ...data,\n        id: overridenId,\n      },\n    };\n  }\n  const newId = fireWrapper.dbMakeNewId();\n  const data = await client.parseDataAndUpload(r, newId, params.data);\n  const docObj = { ...data };\n  client.checkRemoveIdField(docObj, newId);\n  await client.addCreatedByFields(docObj);\n  await client.addUpdatedByFields(docObj);\n  await r.collection.doc(newId).set(docObj, { merge: false });\n  return {\n    data: {\n      ...data,\n      id: newId,\n    },\n  };\n}\n","import { FireClient } from \"../database/FireClient\";\nimport { log } from \"../../misc\";\nimport * as ra from \"../../misc/react-admin-models\";\nimport { DeleteSoft } from \"./Delete.Soft\";\n\nexport async function Delete<T extends ra.Record>(\n  resourceName: string,\n  params: ra.DeleteParams,\n  client: FireClient\n): Promise<ra.DeleteResult<T>> {\n  const { rm, options } = client;\n  if (options.softDelete) {\n    return DeleteSoft(resourceName, params, client);\n  }\n  const r = await rm.TryGetResource(resourceName);\n  log(\"apiDelete\", { resourceName, resource: r, params });\n  try {\n    const id = params.id + \"\";\n    await r.collection.doc(id).delete();\n  } catch (error) {\n    throw new Error(error as any);\n  }\n  return {\n    data: params.previousData as T,\n  };\n}\n","import { FireClient } from \"../database/FireClient\";\nimport { log, logError } from \"../../misc\";\nimport * as ra from \"../../misc/react-admin-models\";\n\nexport async function DeleteSoft<T extends ra.Record>(\n  resourceName: string,\n  params: ra.DeleteParams,\n  client: FireClient\n): Promise<ra.DeleteResult<T>> {\n  const { rm } = client;\n  const id = params.id + \"\";\n  const r = await rm.TryGetResource(resourceName);\n  log(\"DeleteSoft\", { resourceName, resource: r, params });\n  const docObj = { deleted: true };\n  await client.addUpdatedByFields(docObj);\n  r.collection\n    .doc(id)\n    .update(docObj)\n    .catch((error) => {\n      logError(\"DeleteSoft error\", { error });\n    });\n  return {\n    data: params.previousData as T,\n  };\n}\n","import { FireClient } from \"../database/FireClient\";\nimport { log } from \"../../misc\";\nimport * as ra from \"../../misc/react-admin-models\";\nimport { DeleteManySoft } from \"./DeleteMany.Soft\";\n\nexport async function DeleteMany(\n  resourceName: string,\n  params: ra.DeleteManyParams,\n  client: FireClient\n): Promise<ra.DeleteManyResult> {\n  const { options, rm, fireWrapper } = client;\n  if (options.softDelete) {\n    return DeleteManySoft(resourceName, params, client);\n  }\n  const r = await rm.TryGetResource(resourceName);\n  log(\"DeleteMany\", { resourceName, resource: r, params });\n  const returnData: ra.Identifier[] = [];\n  const batch = fireWrapper.dbCreateBatch();\n  for (const id of params.ids) {\n    const idStr = id + '';\n    const docToDelete = r.collection.doc(idStr);\n    batch.delete(docToDelete);\n    returnData.push(id);\n  }\n  try {\n    await batch.commit();\n  } catch (error) {\n    throw new Error(error as any)\n  }\n  return { data: returnData };\n}\n","import { FireClient } from \"../database/FireClient\";\nimport { log, logError } from \"../../misc\";\nimport * as ra from \"../../misc/react-admin-models\";\n\nexport async function DeleteManySoft(\n  resourceName: string,\n  params: ra.DeleteManyParams,\n  client: FireClient\n): Promise<ra.DeleteManyResult> {\n  const { rm } = client;\n  const r = await rm.TryGetResource(resourceName);\n  log(\"DeleteManySoft\", { resourceName, resource: r, params });\n  const ids = params.ids;\n  const returnData = await Promise.all(\n    ids.map(async (id) => {\n      const idStr = id + \"\";\n      const docObj = { deleted: true };\n      await client.addUpdatedByFields(docObj);\n      r.collection\n        .doc(idStr)\n        .update(docObj)\n        .catch((error) => {\n          logError(\"apiSoftDeleteMany error\", { error });\n        });\n      return idStr;\n    })\n  );\n  return {\n    data: returnData,\n  };\n}\n"],"names":["parseAllDatesDoc","obj","Object","keys","map","key","recusivelyCheckObjectValue","input","toDate","Array","isArray","value","parseFireStoreDocument","doc","data","id","sortArray","field","dir","sort","a","b","rawA","get","rawB","isAsc","Number","isFinite","basicSort","toLowerCase","Date","aValue","bValue","filterArray","searchFields","isEmpty","searchObjs","fieldName","getSubObjects","searchField","searchValue","tree","leaves","recursivelyWalk","path","hasOwnProperty","objVal","currentPath","push","objectFlatten","getFieldReferences","filter","row","reduce","acc","cur","searchThis","toString","includes","doesRowMatch","LogNoOp","LoggerBase","title","cacheEnabledKey","this","isEnabled","localStorage","getItem","SetEnabled","setItem","removeItem","console","log","bind","warn","error","logger","logError","logWarn","KEY_SINGLE","s","then","pact","_Pact","result","state","_settle","onRejected","recursivelyMapStorageUrls","fireWrapper","fieldValue","isObject","src","startsWith","getStorageDownloadUrl","_exit2","i","getAbsolutePath","rootRef","relativePath","Error","rootRefValue","withSlashes","join","split","length","slice","joinPaths","FirebaseWrapper","inputOptions","firebaseConfig","optionsSafe","options","app","window","firebase","apps","_firebase$apps","initializeApp","ObtainFirebaseApp","firestore","dbGetCollection","absolutePath","collection","dbCreateBatch","batch","dbMakeNewId","OnUserLogout","callBack","auth","onAuthStateChanged","user","isLoggedOut","putFile","storagePath","rawFile","task","storage","ref","put","taskResult","Promise","res","rej","downloadUrl","t","getDownloadURL","url","fieldSrc","serverTimestamp","FieldValue","authSetPersistence","persistenceInput","persistenceResolved","Auth","Persistence","LOCAL","NONE","SESSION","setPersistence","authSigninEmailPassword","email","password","signInWithEmailAndPassword","authSignOut","signOut","authGetUserLoggedIn","resolve","reject","_this10","currentUser","unsubscribe","GetUserLogin","GetApp","db","ResourceManager","flogger","_this","resources","TryGetResource","resourceName","refresh","collectionQuery","TryGetResourcePromise","_this3","RefreshResource","GetResource","resource","_this5","initPath","_this7","_this7$options","lazyLoading","_this7$options$lazyLo","enabled","query","applyQuery","newDocs","list","docs","logDocument","collectionPath","GetSingleDoc","docId","_this9","docSnap","exists","hasBeenInited","pathAbsolute","allResources","getUserIdentifier","_this13","associateUsersById","getCurrentUserEmail","identifier","getCurrentUserId","uid","collRef","FireClient","rm","checkRemoveIdField","dontAddIdFieldToDoc","parseDataAndUpload","r","docPath","uploads","recusivelyParseObjectValue","fieldPath","index","fieldDotsPath","fieldSlashesPath","parseDocGetAllUploads","all","u","_this2","uploadAndGetLink","useFileNamesInStorage","link","set","addCreatedByFields","disableMeta","currentUserIdentifier","createAtSelector","renameMetaFields","created_at","casing","metaFieldCasing","GetSelectorsCreateAt","createBySelector","created_by","GetSelectorsCreateBy","AddCreatedByFields","addUpdatedByFields","updateAtSelector","updated_at","GetSelectorsUpdateAt","updateBySelector","updated_by","GetSelectorsUpdateBy","AddUpdatedByFields","useFileName","name","saveFile","relativeFilePaths","storageError","callback","v","thenable","getQueryCursor","params","btoa","JSON","stringify","paramsToQuery","defaultParamsToQueryOptions","filtersStepQuery","filters","entries","opStr","where","sortStepQuery","parsedOrder","order","toLocaleLowerCase","orderBy","sortToQuery","pagination","page","perPage","queryCursor","startAfter","limit","queryBase","currentPage","newQuery","startAt","lastQueryCursor","snapshots","docsLength","currentPageParams","findLastQueryCursor","paginationToQuery","getFullParamsForQuery","reactAdminParams","softdeleteEnabled","deleted","array","FirebaseLazyLoadingClient","client","apiGetList","tryGetResource","softDelete","resultsCount","message","total","d","nextPageCursor","allCursorsKey","localCursorKeys","newCursors","parse","concat","setQueryCursor","getNextPageParams","checkIfOnLastPage","isOnLastPage","parsedData","apiGetManyReference","_this4","filterWithTarget","target","nextElementSnapshot","empty","clearQueryCursors","forEach","cursor","AuthClient","optionsInput","persistence","HandleAuthLogin","username","getUserLogin","HandleAuthLogout","HandleAuthError","errorHttp","status","retrieveStatusTxt","HandleAuthCheck","HandleGetPermissions","_this6","getIdTokenResult","token","claims","e","HandleGetIdentity","_this8","displayName","photoURL","fullName","avatar","HandleGetJWTAuthTime","authTime","HandleGetJWTExpirationTime","_this12","expirationTime","HandleGetJWTSignInProvider","_this14","signInProvider","HandleGetJWTIssuedAtTime","_this16","issuedAtTime","HandleGetJWTToken","_this18","VerifyAuthProviderArgs","logging","login","logout","checkAuth","checkError","getPermissions","getIdentity","getAuthUser","getJWTAuthTime","getJWTExpirationTime","getJWTSignInProvider","getJWTClaims","getJWTToken","run","cb","errorMsg","code","statusTxt","regexResult","exec","retrieveStatusCode","errorObj","json","verifyDataProviderArgs","ResetCount","shouldReset","docCount","_options$lazyLoading","count","incrementBy","currentCountRaw","incremented","parseInt","incrementRead","MakeFirestoreLogger","firestoreCostsLogger","_options$firestoreCos","_options$firestoreCos2","persistCount","getList","lazyClient","filterSafe","dataPage","softDeleted","filteredData","pageStart","GetList","getOne","dataSingle","GetOne","getMany","ids","matchDocSnaps","permittedData","matches","snap","GetMany","getManyReference","targetField","targetValue","targetIdFilter","GetManyReference","update","docObj","Update","updateMany","idStr","returnData","UpdateMany","create","newId","merge","hasOverridenDocId","overridenId","_r$collection$doc$get","Create","previousData","DeleteSoft","Delete","deleteMany","DeleteManySoft","docToDelete","commit","DeleteMany"],"mappings":"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"}